
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model BoardLists
 * 
 */
export type BoardLists = $Result.DefaultSelection<Prisma.$BoardListsPayload>
/**
 * Model BoardMembers
 * 
 */
export type BoardMembers = $Result.DefaultSelection<Prisma.$BoardMembersPayload>
/**
 * Model Boards
 * 
 */
export type Boards = $Result.DefaultSelection<Prisma.$BoardsPayload>
/**
 * Model Cards
 * 
 */
export type Cards = $Result.DefaultSelection<Prisma.$CardsPayload>
/**
 * Model CheckLists
 * 
 */
export type CheckLists = $Result.DefaultSelection<Prisma.$CheckListsPayload>
/**
 * Model Comments
 * 
 */
export type Comments = $Result.DefaultSelection<Prisma.$CommentsPayload>
/**
 * Model ListCards
 * 
 */
export type ListCards = $Result.DefaultSelection<Prisma.$ListCardsPayload>
/**
 * Model Lists
 * 
 */
export type Lists = $Result.DefaultSelection<Prisma.$ListsPayload>
/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more BoardLists
 * const boardLists = await prisma.boardLists.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more BoardLists
   * const boardLists = await prisma.boardLists.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.boardLists`: Exposes CRUD operations for the **BoardLists** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BoardLists
    * const boardLists = await prisma.boardLists.findMany()
    * ```
    */
  get boardLists(): Prisma.BoardListsDelegate<ExtArgs>;

  /**
   * `prisma.boardMembers`: Exposes CRUD operations for the **BoardMembers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BoardMembers
    * const boardMembers = await prisma.boardMembers.findMany()
    * ```
    */
  get boardMembers(): Prisma.BoardMembersDelegate<ExtArgs>;

  /**
   * `prisma.boards`: Exposes CRUD operations for the **Boards** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Boards
    * const boards = await prisma.boards.findMany()
    * ```
    */
  get boards(): Prisma.BoardsDelegate<ExtArgs>;

  /**
   * `prisma.cards`: Exposes CRUD operations for the **Cards** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cards
    * const cards = await prisma.cards.findMany()
    * ```
    */
  get cards(): Prisma.CardsDelegate<ExtArgs>;

  /**
   * `prisma.checkLists`: Exposes CRUD operations for the **CheckLists** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CheckLists
    * const checkLists = await prisma.checkLists.findMany()
    * ```
    */
  get checkLists(): Prisma.CheckListsDelegate<ExtArgs>;

  /**
   * `prisma.comments`: Exposes CRUD operations for the **Comments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comments.findMany()
    * ```
    */
  get comments(): Prisma.CommentsDelegate<ExtArgs>;

  /**
   * `prisma.listCards`: Exposes CRUD operations for the **ListCards** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ListCards
    * const listCards = await prisma.listCards.findMany()
    * ```
    */
  get listCards(): Prisma.ListCardsDelegate<ExtArgs>;

  /**
   * `prisma.lists`: Exposes CRUD operations for the **Lists** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lists
    * const lists = await prisma.lists.findMany()
    * ```
    */
  get lists(): Prisma.ListsDelegate<ExtArgs>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    BoardLists: 'BoardLists',
    BoardMembers: 'BoardMembers',
    Boards: 'Boards',
    Cards: 'Cards',
    CheckLists: 'CheckLists',
    Comments: 'Comments',
    ListCards: 'ListCards',
    Lists: 'Lists',
    Users: 'Users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'boardLists' | 'boardMembers' | 'boards' | 'cards' | 'checkLists' | 'comments' | 'listCards' | 'lists' | 'users'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      BoardLists: {
        payload: Prisma.$BoardListsPayload<ExtArgs>
        fields: Prisma.BoardListsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BoardListsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardListsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BoardListsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardListsPayload>
          }
          findFirst: {
            args: Prisma.BoardListsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardListsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BoardListsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardListsPayload>
          }
          findMany: {
            args: Prisma.BoardListsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardListsPayload>[]
          }
          create: {
            args: Prisma.BoardListsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardListsPayload>
          }
          createMany: {
            args: Prisma.BoardListsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BoardListsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardListsPayload>
          }
          update: {
            args: Prisma.BoardListsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardListsPayload>
          }
          deleteMany: {
            args: Prisma.BoardListsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BoardListsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BoardListsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardListsPayload>
          }
          aggregate: {
            args: Prisma.BoardListsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBoardLists>
          }
          groupBy: {
            args: Prisma.BoardListsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BoardListsGroupByOutputType>[]
          }
          count: {
            args: Prisma.BoardListsCountArgs<ExtArgs>,
            result: $Utils.Optional<BoardListsCountAggregateOutputType> | number
          }
        }
      }
      BoardMembers: {
        payload: Prisma.$BoardMembersPayload<ExtArgs>
        fields: Prisma.BoardMembersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BoardMembersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardMembersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BoardMembersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardMembersPayload>
          }
          findFirst: {
            args: Prisma.BoardMembersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardMembersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BoardMembersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardMembersPayload>
          }
          findMany: {
            args: Prisma.BoardMembersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardMembersPayload>[]
          }
          create: {
            args: Prisma.BoardMembersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardMembersPayload>
          }
          createMany: {
            args: Prisma.BoardMembersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BoardMembersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardMembersPayload>
          }
          update: {
            args: Prisma.BoardMembersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardMembersPayload>
          }
          deleteMany: {
            args: Prisma.BoardMembersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BoardMembersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BoardMembersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardMembersPayload>
          }
          aggregate: {
            args: Prisma.BoardMembersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBoardMembers>
          }
          groupBy: {
            args: Prisma.BoardMembersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BoardMembersGroupByOutputType>[]
          }
          count: {
            args: Prisma.BoardMembersCountArgs<ExtArgs>,
            result: $Utils.Optional<BoardMembersCountAggregateOutputType> | number
          }
        }
      }
      Boards: {
        payload: Prisma.$BoardsPayload<ExtArgs>
        fields: Prisma.BoardsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BoardsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BoardsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardsPayload>
          }
          findFirst: {
            args: Prisma.BoardsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BoardsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardsPayload>
          }
          findMany: {
            args: Prisma.BoardsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardsPayload>[]
          }
          create: {
            args: Prisma.BoardsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardsPayload>
          }
          createMany: {
            args: Prisma.BoardsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BoardsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardsPayload>
          }
          update: {
            args: Prisma.BoardsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardsPayload>
          }
          deleteMany: {
            args: Prisma.BoardsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BoardsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BoardsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardsPayload>
          }
          aggregate: {
            args: Prisma.BoardsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBoards>
          }
          groupBy: {
            args: Prisma.BoardsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BoardsGroupByOutputType>[]
          }
          count: {
            args: Prisma.BoardsCountArgs<ExtArgs>,
            result: $Utils.Optional<BoardsCountAggregateOutputType> | number
          }
        }
      }
      Cards: {
        payload: Prisma.$CardsPayload<ExtArgs>
        fields: Prisma.CardsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CardsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CardsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CardsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CardsPayload>
          }
          findFirst: {
            args: Prisma.CardsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CardsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CardsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CardsPayload>
          }
          findMany: {
            args: Prisma.CardsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CardsPayload>[]
          }
          create: {
            args: Prisma.CardsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CardsPayload>
          }
          createMany: {
            args: Prisma.CardsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CardsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CardsPayload>
          }
          update: {
            args: Prisma.CardsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CardsPayload>
          }
          deleteMany: {
            args: Prisma.CardsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CardsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CardsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CardsPayload>
          }
          aggregate: {
            args: Prisma.CardsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCards>
          }
          groupBy: {
            args: Prisma.CardsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CardsGroupByOutputType>[]
          }
          count: {
            args: Prisma.CardsCountArgs<ExtArgs>,
            result: $Utils.Optional<CardsCountAggregateOutputType> | number
          }
        }
      }
      CheckLists: {
        payload: Prisma.$CheckListsPayload<ExtArgs>
        fields: Prisma.CheckListsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CheckListsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CheckListsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CheckListsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CheckListsPayload>
          }
          findFirst: {
            args: Prisma.CheckListsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CheckListsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CheckListsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CheckListsPayload>
          }
          findMany: {
            args: Prisma.CheckListsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CheckListsPayload>[]
          }
          create: {
            args: Prisma.CheckListsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CheckListsPayload>
          }
          createMany: {
            args: Prisma.CheckListsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CheckListsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CheckListsPayload>
          }
          update: {
            args: Prisma.CheckListsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CheckListsPayload>
          }
          deleteMany: {
            args: Prisma.CheckListsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CheckListsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CheckListsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CheckListsPayload>
          }
          aggregate: {
            args: Prisma.CheckListsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCheckLists>
          }
          groupBy: {
            args: Prisma.CheckListsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CheckListsGroupByOutputType>[]
          }
          count: {
            args: Prisma.CheckListsCountArgs<ExtArgs>,
            result: $Utils.Optional<CheckListsCountAggregateOutputType> | number
          }
        }
      }
      Comments: {
        payload: Prisma.$CommentsPayload<ExtArgs>
        fields: Prisma.CommentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          findFirst: {
            args: Prisma.CommentsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          findMany: {
            args: Prisma.CommentsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>[]
          }
          create: {
            args: Prisma.CommentsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          createMany: {
            args: Prisma.CommentsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CommentsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          update: {
            args: Prisma.CommentsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          deleteMany: {
            args: Prisma.CommentsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CommentsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CommentsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          aggregate: {
            args: Prisma.CommentsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateComments>
          }
          groupBy: {
            args: Prisma.CommentsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentsCountArgs<ExtArgs>,
            result: $Utils.Optional<CommentsCountAggregateOutputType> | number
          }
        }
      }
      ListCards: {
        payload: Prisma.$ListCardsPayload<ExtArgs>
        fields: Prisma.ListCardsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ListCardsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListCardsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ListCardsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListCardsPayload>
          }
          findFirst: {
            args: Prisma.ListCardsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListCardsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ListCardsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListCardsPayload>
          }
          findMany: {
            args: Prisma.ListCardsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListCardsPayload>[]
          }
          create: {
            args: Prisma.ListCardsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListCardsPayload>
          }
          createMany: {
            args: Prisma.ListCardsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ListCardsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListCardsPayload>
          }
          update: {
            args: Prisma.ListCardsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListCardsPayload>
          }
          deleteMany: {
            args: Prisma.ListCardsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ListCardsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ListCardsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListCardsPayload>
          }
          aggregate: {
            args: Prisma.ListCardsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateListCards>
          }
          groupBy: {
            args: Prisma.ListCardsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ListCardsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ListCardsCountArgs<ExtArgs>,
            result: $Utils.Optional<ListCardsCountAggregateOutputType> | number
          }
        }
      }
      Lists: {
        payload: Prisma.$ListsPayload<ExtArgs>
        fields: Prisma.ListsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ListsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ListsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListsPayload>
          }
          findFirst: {
            args: Prisma.ListsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ListsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListsPayload>
          }
          findMany: {
            args: Prisma.ListsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListsPayload>[]
          }
          create: {
            args: Prisma.ListsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListsPayload>
          }
          createMany: {
            args: Prisma.ListsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ListsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListsPayload>
          }
          update: {
            args: Prisma.ListsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListsPayload>
          }
          deleteMany: {
            args: Prisma.ListsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ListsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ListsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ListsPayload>
          }
          aggregate: {
            args: Prisma.ListsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLists>
          }
          groupBy: {
            args: Prisma.ListsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ListsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ListsCountArgs<ExtArgs>,
            result: $Utils.Optional<ListsCountAggregateOutputType> | number
          }
        }
      }
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BoardsCountOutputType
   */

  export type BoardsCountOutputType = {
    BoardLists: number
    BoardMembers: number
  }

  export type BoardsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BoardLists?: boolean | BoardsCountOutputTypeCountBoardListsArgs
    BoardMembers?: boolean | BoardsCountOutputTypeCountBoardMembersArgs
  }

  // Custom InputTypes
  /**
   * BoardsCountOutputType without action
   */
  export type BoardsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardsCountOutputType
     */
    select?: BoardsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BoardsCountOutputType without action
   */
  export type BoardsCountOutputTypeCountBoardListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardListsWhereInput
  }

  /**
   * BoardsCountOutputType without action
   */
  export type BoardsCountOutputTypeCountBoardMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardMembersWhereInput
  }


  /**
   * Count Type CardsCountOutputType
   */

  export type CardsCountOutputType = {
    CheckLists: number
    Comments: number
    ListCards: number
  }

  export type CardsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CheckLists?: boolean | CardsCountOutputTypeCountCheckListsArgs
    Comments?: boolean | CardsCountOutputTypeCountCommentsArgs
    ListCards?: boolean | CardsCountOutputTypeCountListCardsArgs
  }

  // Custom InputTypes
  /**
   * CardsCountOutputType without action
   */
  export type CardsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardsCountOutputType
     */
    select?: CardsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CardsCountOutputType without action
   */
  export type CardsCountOutputTypeCountCheckListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CheckListsWhereInput
  }

  /**
   * CardsCountOutputType without action
   */
  export type CardsCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentsWhereInput
  }

  /**
   * CardsCountOutputType without action
   */
  export type CardsCountOutputTypeCountListCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ListCardsWhereInput
  }


  /**
   * Count Type ListsCountOutputType
   */

  export type ListsCountOutputType = {
    BoardLists: number
    ListCards: number
  }

  export type ListsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BoardLists?: boolean | ListsCountOutputTypeCountBoardListsArgs
    ListCards?: boolean | ListsCountOutputTypeCountListCardsArgs
  }

  // Custom InputTypes
  /**
   * ListsCountOutputType without action
   */
  export type ListsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListsCountOutputType
     */
    select?: ListsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ListsCountOutputType without action
   */
  export type ListsCountOutputTypeCountBoardListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardListsWhereInput
  }

  /**
   * ListsCountOutputType without action
   */
  export type ListsCountOutputTypeCountListCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ListCardsWhereInput
  }


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    BoardMembers: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BoardMembers?: boolean | UsersCountOutputTypeCountBoardMembersArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountBoardMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardMembersWhereInput
  }


  /**
   * Models
   */

  /**
   * Model BoardLists
   */

  export type AggregateBoardLists = {
    _count: BoardListsCountAggregateOutputType | null
    _avg: BoardListsAvgAggregateOutputType | null
    _sum: BoardListsSumAggregateOutputType | null
    _min: BoardListsMinAggregateOutputType | null
    _max: BoardListsMaxAggregateOutputType | null
  }

  export type BoardListsAvgAggregateOutputType = {
    BoardId: number | null
    ListId: number | null
  }

  export type BoardListsSumAggregateOutputType = {
    BoardId: number | null
    ListId: number | null
  }

  export type BoardListsMinAggregateOutputType = {
    BoardId: number | null
    ListId: number | null
  }

  export type BoardListsMaxAggregateOutputType = {
    BoardId: number | null
    ListId: number | null
  }

  export type BoardListsCountAggregateOutputType = {
    BoardId: number
    ListId: number
    _all: number
  }


  export type BoardListsAvgAggregateInputType = {
    BoardId?: true
    ListId?: true
  }

  export type BoardListsSumAggregateInputType = {
    BoardId?: true
    ListId?: true
  }

  export type BoardListsMinAggregateInputType = {
    BoardId?: true
    ListId?: true
  }

  export type BoardListsMaxAggregateInputType = {
    BoardId?: true
    ListId?: true
  }

  export type BoardListsCountAggregateInputType = {
    BoardId?: true
    ListId?: true
    _all?: true
  }

  export type BoardListsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BoardLists to aggregate.
     */
    where?: BoardListsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardLists to fetch.
     */
    orderBy?: BoardListsOrderByWithRelationInput | BoardListsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BoardListsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BoardLists
    **/
    _count?: true | BoardListsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BoardListsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BoardListsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BoardListsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BoardListsMaxAggregateInputType
  }

  export type GetBoardListsAggregateType<T extends BoardListsAggregateArgs> = {
        [P in keyof T & keyof AggregateBoardLists]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBoardLists[P]>
      : GetScalarType<T[P], AggregateBoardLists[P]>
  }




  export type BoardListsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardListsWhereInput
    orderBy?: BoardListsOrderByWithAggregationInput | BoardListsOrderByWithAggregationInput[]
    by: BoardListsScalarFieldEnum[] | BoardListsScalarFieldEnum
    having?: BoardListsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BoardListsCountAggregateInputType | true
    _avg?: BoardListsAvgAggregateInputType
    _sum?: BoardListsSumAggregateInputType
    _min?: BoardListsMinAggregateInputType
    _max?: BoardListsMaxAggregateInputType
  }

  export type BoardListsGroupByOutputType = {
    BoardId: number
    ListId: number
    _count: BoardListsCountAggregateOutputType | null
    _avg: BoardListsAvgAggregateOutputType | null
    _sum: BoardListsSumAggregateOutputType | null
    _min: BoardListsMinAggregateOutputType | null
    _max: BoardListsMaxAggregateOutputType | null
  }

  type GetBoardListsGroupByPayload<T extends BoardListsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BoardListsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BoardListsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BoardListsGroupByOutputType[P]>
            : GetScalarType<T[P], BoardListsGroupByOutputType[P]>
        }
      >
    >


  export type BoardListsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    BoardId?: boolean
    ListId?: boolean
    Boards?: boolean | BoardsDefaultArgs<ExtArgs>
    Lists?: boolean | ListsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["boardLists"]>

  export type BoardListsSelectScalar = {
    BoardId?: boolean
    ListId?: boolean
  }


  export type BoardListsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Boards?: boolean | BoardsDefaultArgs<ExtArgs>
    Lists?: boolean | ListsDefaultArgs<ExtArgs>
  }


  export type $BoardListsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BoardLists"
    objects: {
      Boards: Prisma.$BoardsPayload<ExtArgs>
      Lists: Prisma.$ListsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      BoardId: number
      ListId: number
    }, ExtArgs["result"]["boardLists"]>
    composites: {}
  }


  type BoardListsGetPayload<S extends boolean | null | undefined | BoardListsDefaultArgs> = $Result.GetResult<Prisma.$BoardListsPayload, S>

  type BoardListsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BoardListsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BoardListsCountAggregateInputType | true
    }

  export interface BoardListsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BoardLists'], meta: { name: 'BoardLists' } }
    /**
     * Find zero or one BoardLists that matches the filter.
     * @param {BoardListsFindUniqueArgs} args - Arguments to find a BoardLists
     * @example
     * // Get one BoardLists
     * const boardLists = await prisma.boardLists.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BoardListsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BoardListsFindUniqueArgs<ExtArgs>>
    ): Prisma__BoardListsClient<$Result.GetResult<Prisma.$BoardListsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one BoardLists that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BoardListsFindUniqueOrThrowArgs} args - Arguments to find a BoardLists
     * @example
     * // Get one BoardLists
     * const boardLists = await prisma.boardLists.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BoardListsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardListsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BoardListsClient<$Result.GetResult<Prisma.$BoardListsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first BoardLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardListsFindFirstArgs} args - Arguments to find a BoardLists
     * @example
     * // Get one BoardLists
     * const boardLists = await prisma.boardLists.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BoardListsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardListsFindFirstArgs<ExtArgs>>
    ): Prisma__BoardListsClient<$Result.GetResult<Prisma.$BoardListsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first BoardLists that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardListsFindFirstOrThrowArgs} args - Arguments to find a BoardLists
     * @example
     * // Get one BoardLists
     * const boardLists = await prisma.boardLists.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BoardListsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardListsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BoardListsClient<$Result.GetResult<Prisma.$BoardListsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more BoardLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardListsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BoardLists
     * const boardLists = await prisma.boardLists.findMany()
     * 
     * // Get first 10 BoardLists
     * const boardLists = await prisma.boardLists.findMany({ take: 10 })
     * 
     * // Only select the `BoardId`
     * const boardListsWithBoardIdOnly = await prisma.boardLists.findMany({ select: { BoardId: true } })
     * 
    **/
    findMany<T extends BoardListsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardListsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardListsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a BoardLists.
     * @param {BoardListsCreateArgs} args - Arguments to create a BoardLists.
     * @example
     * // Create one BoardLists
     * const BoardLists = await prisma.boardLists.create({
     *   data: {
     *     // ... data to create a BoardLists
     *   }
     * })
     * 
    **/
    create<T extends BoardListsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BoardListsCreateArgs<ExtArgs>>
    ): Prisma__BoardListsClient<$Result.GetResult<Prisma.$BoardListsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many BoardLists.
     *     @param {BoardListsCreateManyArgs} args - Arguments to create many BoardLists.
     *     @example
     *     // Create many BoardLists
     *     const boardLists = await prisma.boardLists.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BoardListsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardListsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BoardLists.
     * @param {BoardListsDeleteArgs} args - Arguments to delete one BoardLists.
     * @example
     * // Delete one BoardLists
     * const BoardLists = await prisma.boardLists.delete({
     *   where: {
     *     // ... filter to delete one BoardLists
     *   }
     * })
     * 
    **/
    delete<T extends BoardListsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BoardListsDeleteArgs<ExtArgs>>
    ): Prisma__BoardListsClient<$Result.GetResult<Prisma.$BoardListsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one BoardLists.
     * @param {BoardListsUpdateArgs} args - Arguments to update one BoardLists.
     * @example
     * // Update one BoardLists
     * const boardLists = await prisma.boardLists.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BoardListsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BoardListsUpdateArgs<ExtArgs>>
    ): Prisma__BoardListsClient<$Result.GetResult<Prisma.$BoardListsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more BoardLists.
     * @param {BoardListsDeleteManyArgs} args - Arguments to filter BoardLists to delete.
     * @example
     * // Delete a few BoardLists
     * const { count } = await prisma.boardLists.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BoardListsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardListsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BoardLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardListsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BoardLists
     * const boardLists = await prisma.boardLists.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BoardListsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BoardListsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BoardLists.
     * @param {BoardListsUpsertArgs} args - Arguments to update or create a BoardLists.
     * @example
     * // Update or create a BoardLists
     * const boardLists = await prisma.boardLists.upsert({
     *   create: {
     *     // ... data to create a BoardLists
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BoardLists we want to update
     *   }
     * })
    **/
    upsert<T extends BoardListsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BoardListsUpsertArgs<ExtArgs>>
    ): Prisma__BoardListsClient<$Result.GetResult<Prisma.$BoardListsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of BoardLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardListsCountArgs} args - Arguments to filter BoardLists to count.
     * @example
     * // Count the number of BoardLists
     * const count = await prisma.boardLists.count({
     *   where: {
     *     // ... the filter for the BoardLists we want to count
     *   }
     * })
    **/
    count<T extends BoardListsCountArgs>(
      args?: Subset<T, BoardListsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BoardListsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BoardLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardListsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BoardListsAggregateArgs>(args: Subset<T, BoardListsAggregateArgs>): Prisma.PrismaPromise<GetBoardListsAggregateType<T>>

    /**
     * Group by BoardLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardListsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BoardListsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BoardListsGroupByArgs['orderBy'] }
        : { orderBy?: BoardListsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BoardListsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBoardListsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BoardLists model
   */
  readonly fields: BoardListsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BoardLists.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BoardListsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Boards<T extends BoardsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BoardsDefaultArgs<ExtArgs>>): Prisma__BoardsClient<$Result.GetResult<Prisma.$BoardsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Lists<T extends ListsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ListsDefaultArgs<ExtArgs>>): Prisma__ListsClient<$Result.GetResult<Prisma.$ListsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the BoardLists model
   */ 
  interface BoardListsFieldRefs {
    readonly BoardId: FieldRef<"BoardLists", 'Int'>
    readonly ListId: FieldRef<"BoardLists", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * BoardLists findUnique
   */
  export type BoardListsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardLists
     */
    select?: BoardListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardListsInclude<ExtArgs> | null
    /**
     * Filter, which BoardLists to fetch.
     */
    where: BoardListsWhereUniqueInput
  }

  /**
   * BoardLists findUniqueOrThrow
   */
  export type BoardListsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardLists
     */
    select?: BoardListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardListsInclude<ExtArgs> | null
    /**
     * Filter, which BoardLists to fetch.
     */
    where: BoardListsWhereUniqueInput
  }

  /**
   * BoardLists findFirst
   */
  export type BoardListsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardLists
     */
    select?: BoardListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardListsInclude<ExtArgs> | null
    /**
     * Filter, which BoardLists to fetch.
     */
    where?: BoardListsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardLists to fetch.
     */
    orderBy?: BoardListsOrderByWithRelationInput | BoardListsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BoardLists.
     */
    cursor?: BoardListsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BoardLists.
     */
    distinct?: BoardListsScalarFieldEnum | BoardListsScalarFieldEnum[]
  }

  /**
   * BoardLists findFirstOrThrow
   */
  export type BoardListsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardLists
     */
    select?: BoardListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardListsInclude<ExtArgs> | null
    /**
     * Filter, which BoardLists to fetch.
     */
    where?: BoardListsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardLists to fetch.
     */
    orderBy?: BoardListsOrderByWithRelationInput | BoardListsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BoardLists.
     */
    cursor?: BoardListsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BoardLists.
     */
    distinct?: BoardListsScalarFieldEnum | BoardListsScalarFieldEnum[]
  }

  /**
   * BoardLists findMany
   */
  export type BoardListsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardLists
     */
    select?: BoardListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardListsInclude<ExtArgs> | null
    /**
     * Filter, which BoardLists to fetch.
     */
    where?: BoardListsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardLists to fetch.
     */
    orderBy?: BoardListsOrderByWithRelationInput | BoardListsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BoardLists.
     */
    cursor?: BoardListsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardLists.
     */
    skip?: number
    distinct?: BoardListsScalarFieldEnum | BoardListsScalarFieldEnum[]
  }

  /**
   * BoardLists create
   */
  export type BoardListsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardLists
     */
    select?: BoardListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardListsInclude<ExtArgs> | null
    /**
     * The data needed to create a BoardLists.
     */
    data: XOR<BoardListsCreateInput, BoardListsUncheckedCreateInput>
  }

  /**
   * BoardLists createMany
   */
  export type BoardListsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BoardLists.
     */
    data: BoardListsCreateManyInput | BoardListsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BoardLists update
   */
  export type BoardListsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardLists
     */
    select?: BoardListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardListsInclude<ExtArgs> | null
    /**
     * The data needed to update a BoardLists.
     */
    data: XOR<BoardListsUpdateInput, BoardListsUncheckedUpdateInput>
    /**
     * Choose, which BoardLists to update.
     */
    where: BoardListsWhereUniqueInput
  }

  /**
   * BoardLists updateMany
   */
  export type BoardListsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BoardLists.
     */
    data: XOR<BoardListsUpdateManyMutationInput, BoardListsUncheckedUpdateManyInput>
    /**
     * Filter which BoardLists to update
     */
    where?: BoardListsWhereInput
  }

  /**
   * BoardLists upsert
   */
  export type BoardListsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardLists
     */
    select?: BoardListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardListsInclude<ExtArgs> | null
    /**
     * The filter to search for the BoardLists to update in case it exists.
     */
    where: BoardListsWhereUniqueInput
    /**
     * In case the BoardLists found by the `where` argument doesn't exist, create a new BoardLists with this data.
     */
    create: XOR<BoardListsCreateInput, BoardListsUncheckedCreateInput>
    /**
     * In case the BoardLists was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BoardListsUpdateInput, BoardListsUncheckedUpdateInput>
  }

  /**
   * BoardLists delete
   */
  export type BoardListsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardLists
     */
    select?: BoardListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardListsInclude<ExtArgs> | null
    /**
     * Filter which BoardLists to delete.
     */
    where: BoardListsWhereUniqueInput
  }

  /**
   * BoardLists deleteMany
   */
  export type BoardListsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BoardLists to delete
     */
    where?: BoardListsWhereInput
  }

  /**
   * BoardLists without action
   */
  export type BoardListsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardLists
     */
    select?: BoardListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardListsInclude<ExtArgs> | null
  }


  /**
   * Model BoardMembers
   */

  export type AggregateBoardMembers = {
    _count: BoardMembersCountAggregateOutputType | null
    _avg: BoardMembersAvgAggregateOutputType | null
    _sum: BoardMembersSumAggregateOutputType | null
    _min: BoardMembersMinAggregateOutputType | null
    _max: BoardMembersMaxAggregateOutputType | null
  }

  export type BoardMembersAvgAggregateOutputType = {
    BoardId: number | null
    MemberId: number | null
  }

  export type BoardMembersSumAggregateOutputType = {
    BoardId: number | null
    MemberId: number | null
  }

  export type BoardMembersMinAggregateOutputType = {
    BoardId: number | null
    MemberId: number | null
  }

  export type BoardMembersMaxAggregateOutputType = {
    BoardId: number | null
    MemberId: number | null
  }

  export type BoardMembersCountAggregateOutputType = {
    BoardId: number
    MemberId: number
    _all: number
  }


  export type BoardMembersAvgAggregateInputType = {
    BoardId?: true
    MemberId?: true
  }

  export type BoardMembersSumAggregateInputType = {
    BoardId?: true
    MemberId?: true
  }

  export type BoardMembersMinAggregateInputType = {
    BoardId?: true
    MemberId?: true
  }

  export type BoardMembersMaxAggregateInputType = {
    BoardId?: true
    MemberId?: true
  }

  export type BoardMembersCountAggregateInputType = {
    BoardId?: true
    MemberId?: true
    _all?: true
  }

  export type BoardMembersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BoardMembers to aggregate.
     */
    where?: BoardMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardMembers to fetch.
     */
    orderBy?: BoardMembersOrderByWithRelationInput | BoardMembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BoardMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BoardMembers
    **/
    _count?: true | BoardMembersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BoardMembersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BoardMembersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BoardMembersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BoardMembersMaxAggregateInputType
  }

  export type GetBoardMembersAggregateType<T extends BoardMembersAggregateArgs> = {
        [P in keyof T & keyof AggregateBoardMembers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBoardMembers[P]>
      : GetScalarType<T[P], AggregateBoardMembers[P]>
  }




  export type BoardMembersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardMembersWhereInput
    orderBy?: BoardMembersOrderByWithAggregationInput | BoardMembersOrderByWithAggregationInput[]
    by: BoardMembersScalarFieldEnum[] | BoardMembersScalarFieldEnum
    having?: BoardMembersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BoardMembersCountAggregateInputType | true
    _avg?: BoardMembersAvgAggregateInputType
    _sum?: BoardMembersSumAggregateInputType
    _min?: BoardMembersMinAggregateInputType
    _max?: BoardMembersMaxAggregateInputType
  }

  export type BoardMembersGroupByOutputType = {
    BoardId: number
    MemberId: number
    _count: BoardMembersCountAggregateOutputType | null
    _avg: BoardMembersAvgAggregateOutputType | null
    _sum: BoardMembersSumAggregateOutputType | null
    _min: BoardMembersMinAggregateOutputType | null
    _max: BoardMembersMaxAggregateOutputType | null
  }

  type GetBoardMembersGroupByPayload<T extends BoardMembersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BoardMembersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BoardMembersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BoardMembersGroupByOutputType[P]>
            : GetScalarType<T[P], BoardMembersGroupByOutputType[P]>
        }
      >
    >


  export type BoardMembersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    BoardId?: boolean
    MemberId?: boolean
    Boards?: boolean | BoardsDefaultArgs<ExtArgs>
    Users?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["boardMembers"]>

  export type BoardMembersSelectScalar = {
    BoardId?: boolean
    MemberId?: boolean
  }


  export type BoardMembersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Boards?: boolean | BoardsDefaultArgs<ExtArgs>
    Users?: boolean | UsersDefaultArgs<ExtArgs>
  }


  export type $BoardMembersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BoardMembers"
    objects: {
      Boards: Prisma.$BoardsPayload<ExtArgs>
      Users: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      BoardId: number
      MemberId: number
    }, ExtArgs["result"]["boardMembers"]>
    composites: {}
  }


  type BoardMembersGetPayload<S extends boolean | null | undefined | BoardMembersDefaultArgs> = $Result.GetResult<Prisma.$BoardMembersPayload, S>

  type BoardMembersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BoardMembersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BoardMembersCountAggregateInputType | true
    }

  export interface BoardMembersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BoardMembers'], meta: { name: 'BoardMembers' } }
    /**
     * Find zero or one BoardMembers that matches the filter.
     * @param {BoardMembersFindUniqueArgs} args - Arguments to find a BoardMembers
     * @example
     * // Get one BoardMembers
     * const boardMembers = await prisma.boardMembers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BoardMembersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BoardMembersFindUniqueArgs<ExtArgs>>
    ): Prisma__BoardMembersClient<$Result.GetResult<Prisma.$BoardMembersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one BoardMembers that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BoardMembersFindUniqueOrThrowArgs} args - Arguments to find a BoardMembers
     * @example
     * // Get one BoardMembers
     * const boardMembers = await prisma.boardMembers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BoardMembersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardMembersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BoardMembersClient<$Result.GetResult<Prisma.$BoardMembersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first BoardMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardMembersFindFirstArgs} args - Arguments to find a BoardMembers
     * @example
     * // Get one BoardMembers
     * const boardMembers = await prisma.boardMembers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BoardMembersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardMembersFindFirstArgs<ExtArgs>>
    ): Prisma__BoardMembersClient<$Result.GetResult<Prisma.$BoardMembersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first BoardMembers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardMembersFindFirstOrThrowArgs} args - Arguments to find a BoardMembers
     * @example
     * // Get one BoardMembers
     * const boardMembers = await prisma.boardMembers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BoardMembersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardMembersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BoardMembersClient<$Result.GetResult<Prisma.$BoardMembersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more BoardMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardMembersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BoardMembers
     * const boardMembers = await prisma.boardMembers.findMany()
     * 
     * // Get first 10 BoardMembers
     * const boardMembers = await prisma.boardMembers.findMany({ take: 10 })
     * 
     * // Only select the `BoardId`
     * const boardMembersWithBoardIdOnly = await prisma.boardMembers.findMany({ select: { BoardId: true } })
     * 
    **/
    findMany<T extends BoardMembersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardMembersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardMembersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a BoardMembers.
     * @param {BoardMembersCreateArgs} args - Arguments to create a BoardMembers.
     * @example
     * // Create one BoardMembers
     * const BoardMembers = await prisma.boardMembers.create({
     *   data: {
     *     // ... data to create a BoardMembers
     *   }
     * })
     * 
    **/
    create<T extends BoardMembersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BoardMembersCreateArgs<ExtArgs>>
    ): Prisma__BoardMembersClient<$Result.GetResult<Prisma.$BoardMembersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many BoardMembers.
     *     @param {BoardMembersCreateManyArgs} args - Arguments to create many BoardMembers.
     *     @example
     *     // Create many BoardMembers
     *     const boardMembers = await prisma.boardMembers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BoardMembersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardMembersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BoardMembers.
     * @param {BoardMembersDeleteArgs} args - Arguments to delete one BoardMembers.
     * @example
     * // Delete one BoardMembers
     * const BoardMembers = await prisma.boardMembers.delete({
     *   where: {
     *     // ... filter to delete one BoardMembers
     *   }
     * })
     * 
    **/
    delete<T extends BoardMembersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BoardMembersDeleteArgs<ExtArgs>>
    ): Prisma__BoardMembersClient<$Result.GetResult<Prisma.$BoardMembersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one BoardMembers.
     * @param {BoardMembersUpdateArgs} args - Arguments to update one BoardMembers.
     * @example
     * // Update one BoardMembers
     * const boardMembers = await prisma.boardMembers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BoardMembersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BoardMembersUpdateArgs<ExtArgs>>
    ): Prisma__BoardMembersClient<$Result.GetResult<Prisma.$BoardMembersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more BoardMembers.
     * @param {BoardMembersDeleteManyArgs} args - Arguments to filter BoardMembers to delete.
     * @example
     * // Delete a few BoardMembers
     * const { count } = await prisma.boardMembers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BoardMembersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardMembersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BoardMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardMembersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BoardMembers
     * const boardMembers = await prisma.boardMembers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BoardMembersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BoardMembersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BoardMembers.
     * @param {BoardMembersUpsertArgs} args - Arguments to update or create a BoardMembers.
     * @example
     * // Update or create a BoardMembers
     * const boardMembers = await prisma.boardMembers.upsert({
     *   create: {
     *     // ... data to create a BoardMembers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BoardMembers we want to update
     *   }
     * })
    **/
    upsert<T extends BoardMembersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BoardMembersUpsertArgs<ExtArgs>>
    ): Prisma__BoardMembersClient<$Result.GetResult<Prisma.$BoardMembersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of BoardMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardMembersCountArgs} args - Arguments to filter BoardMembers to count.
     * @example
     * // Count the number of BoardMembers
     * const count = await prisma.boardMembers.count({
     *   where: {
     *     // ... the filter for the BoardMembers we want to count
     *   }
     * })
    **/
    count<T extends BoardMembersCountArgs>(
      args?: Subset<T, BoardMembersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BoardMembersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BoardMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardMembersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BoardMembersAggregateArgs>(args: Subset<T, BoardMembersAggregateArgs>): Prisma.PrismaPromise<GetBoardMembersAggregateType<T>>

    /**
     * Group by BoardMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardMembersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BoardMembersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BoardMembersGroupByArgs['orderBy'] }
        : { orderBy?: BoardMembersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BoardMembersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBoardMembersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BoardMembers model
   */
  readonly fields: BoardMembersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BoardMembers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BoardMembersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Boards<T extends BoardsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BoardsDefaultArgs<ExtArgs>>): Prisma__BoardsClient<$Result.GetResult<Prisma.$BoardsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Users<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the BoardMembers model
   */ 
  interface BoardMembersFieldRefs {
    readonly BoardId: FieldRef<"BoardMembers", 'Int'>
    readonly MemberId: FieldRef<"BoardMembers", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * BoardMembers findUnique
   */
  export type BoardMembersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMembers
     */
    select?: BoardMembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMembersInclude<ExtArgs> | null
    /**
     * Filter, which BoardMembers to fetch.
     */
    where: BoardMembersWhereUniqueInput
  }

  /**
   * BoardMembers findUniqueOrThrow
   */
  export type BoardMembersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMembers
     */
    select?: BoardMembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMembersInclude<ExtArgs> | null
    /**
     * Filter, which BoardMembers to fetch.
     */
    where: BoardMembersWhereUniqueInput
  }

  /**
   * BoardMembers findFirst
   */
  export type BoardMembersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMembers
     */
    select?: BoardMembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMembersInclude<ExtArgs> | null
    /**
     * Filter, which BoardMembers to fetch.
     */
    where?: BoardMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardMembers to fetch.
     */
    orderBy?: BoardMembersOrderByWithRelationInput | BoardMembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BoardMembers.
     */
    cursor?: BoardMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BoardMembers.
     */
    distinct?: BoardMembersScalarFieldEnum | BoardMembersScalarFieldEnum[]
  }

  /**
   * BoardMembers findFirstOrThrow
   */
  export type BoardMembersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMembers
     */
    select?: BoardMembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMembersInclude<ExtArgs> | null
    /**
     * Filter, which BoardMembers to fetch.
     */
    where?: BoardMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardMembers to fetch.
     */
    orderBy?: BoardMembersOrderByWithRelationInput | BoardMembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BoardMembers.
     */
    cursor?: BoardMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BoardMembers.
     */
    distinct?: BoardMembersScalarFieldEnum | BoardMembersScalarFieldEnum[]
  }

  /**
   * BoardMembers findMany
   */
  export type BoardMembersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMembers
     */
    select?: BoardMembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMembersInclude<ExtArgs> | null
    /**
     * Filter, which BoardMembers to fetch.
     */
    where?: BoardMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardMembers to fetch.
     */
    orderBy?: BoardMembersOrderByWithRelationInput | BoardMembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BoardMembers.
     */
    cursor?: BoardMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardMembers.
     */
    skip?: number
    distinct?: BoardMembersScalarFieldEnum | BoardMembersScalarFieldEnum[]
  }

  /**
   * BoardMembers create
   */
  export type BoardMembersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMembers
     */
    select?: BoardMembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMembersInclude<ExtArgs> | null
    /**
     * The data needed to create a BoardMembers.
     */
    data: XOR<BoardMembersCreateInput, BoardMembersUncheckedCreateInput>
  }

  /**
   * BoardMembers createMany
   */
  export type BoardMembersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BoardMembers.
     */
    data: BoardMembersCreateManyInput | BoardMembersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BoardMembers update
   */
  export type BoardMembersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMembers
     */
    select?: BoardMembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMembersInclude<ExtArgs> | null
    /**
     * The data needed to update a BoardMembers.
     */
    data: XOR<BoardMembersUpdateInput, BoardMembersUncheckedUpdateInput>
    /**
     * Choose, which BoardMembers to update.
     */
    where: BoardMembersWhereUniqueInput
  }

  /**
   * BoardMembers updateMany
   */
  export type BoardMembersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BoardMembers.
     */
    data: XOR<BoardMembersUpdateManyMutationInput, BoardMembersUncheckedUpdateManyInput>
    /**
     * Filter which BoardMembers to update
     */
    where?: BoardMembersWhereInput
  }

  /**
   * BoardMembers upsert
   */
  export type BoardMembersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMembers
     */
    select?: BoardMembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMembersInclude<ExtArgs> | null
    /**
     * The filter to search for the BoardMembers to update in case it exists.
     */
    where: BoardMembersWhereUniqueInput
    /**
     * In case the BoardMembers found by the `where` argument doesn't exist, create a new BoardMembers with this data.
     */
    create: XOR<BoardMembersCreateInput, BoardMembersUncheckedCreateInput>
    /**
     * In case the BoardMembers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BoardMembersUpdateInput, BoardMembersUncheckedUpdateInput>
  }

  /**
   * BoardMembers delete
   */
  export type BoardMembersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMembers
     */
    select?: BoardMembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMembersInclude<ExtArgs> | null
    /**
     * Filter which BoardMembers to delete.
     */
    where: BoardMembersWhereUniqueInput
  }

  /**
   * BoardMembers deleteMany
   */
  export type BoardMembersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BoardMembers to delete
     */
    where?: BoardMembersWhereInput
  }

  /**
   * BoardMembers without action
   */
  export type BoardMembersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMembers
     */
    select?: BoardMembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMembersInclude<ExtArgs> | null
  }


  /**
   * Model Boards
   */

  export type AggregateBoards = {
    _count: BoardsCountAggregateOutputType | null
    _avg: BoardsAvgAggregateOutputType | null
    _sum: BoardsSumAggregateOutputType | null
    _min: BoardsMinAggregateOutputType | null
    _max: BoardsMaxAggregateOutputType | null
  }

  export type BoardsAvgAggregateOutputType = {
    BoardId: number | null
  }

  export type BoardsSumAggregateOutputType = {
    BoardId: number | null
  }

  export type BoardsMinAggregateOutputType = {
    BoardId: number | null
    CreatedAt: Date | null
    Title: string | null
    UpdatedAt: Date | null
  }

  export type BoardsMaxAggregateOutputType = {
    BoardId: number | null
    CreatedAt: Date | null
    Title: string | null
    UpdatedAt: Date | null
  }

  export type BoardsCountAggregateOutputType = {
    BoardId: number
    CreatedAt: number
    Title: number
    UpdatedAt: number
    _all: number
  }


  export type BoardsAvgAggregateInputType = {
    BoardId?: true
  }

  export type BoardsSumAggregateInputType = {
    BoardId?: true
  }

  export type BoardsMinAggregateInputType = {
    BoardId?: true
    CreatedAt?: true
    Title?: true
    UpdatedAt?: true
  }

  export type BoardsMaxAggregateInputType = {
    BoardId?: true
    CreatedAt?: true
    Title?: true
    UpdatedAt?: true
  }

  export type BoardsCountAggregateInputType = {
    BoardId?: true
    CreatedAt?: true
    Title?: true
    UpdatedAt?: true
    _all?: true
  }

  export type BoardsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Boards to aggregate.
     */
    where?: BoardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardsOrderByWithRelationInput | BoardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BoardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Boards
    **/
    _count?: true | BoardsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BoardsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BoardsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BoardsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BoardsMaxAggregateInputType
  }

  export type GetBoardsAggregateType<T extends BoardsAggregateArgs> = {
        [P in keyof T & keyof AggregateBoards]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBoards[P]>
      : GetScalarType<T[P], AggregateBoards[P]>
  }




  export type BoardsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardsWhereInput
    orderBy?: BoardsOrderByWithAggregationInput | BoardsOrderByWithAggregationInput[]
    by: BoardsScalarFieldEnum[] | BoardsScalarFieldEnum
    having?: BoardsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BoardsCountAggregateInputType | true
    _avg?: BoardsAvgAggregateInputType
    _sum?: BoardsSumAggregateInputType
    _min?: BoardsMinAggregateInputType
    _max?: BoardsMaxAggregateInputType
  }

  export type BoardsGroupByOutputType = {
    BoardId: number
    CreatedAt: Date
    Title: string | null
    UpdatedAt: Date | null
    _count: BoardsCountAggregateOutputType | null
    _avg: BoardsAvgAggregateOutputType | null
    _sum: BoardsSumAggregateOutputType | null
    _min: BoardsMinAggregateOutputType | null
    _max: BoardsMaxAggregateOutputType | null
  }

  type GetBoardsGroupByPayload<T extends BoardsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BoardsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BoardsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BoardsGroupByOutputType[P]>
            : GetScalarType<T[P], BoardsGroupByOutputType[P]>
        }
      >
    >


  export type BoardsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    BoardId?: boolean
    CreatedAt?: boolean
    Title?: boolean
    UpdatedAt?: boolean
    BoardLists?: boolean | Boards$BoardListsArgs<ExtArgs>
    BoardMembers?: boolean | Boards$BoardMembersArgs<ExtArgs>
    _count?: boolean | BoardsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["boards"]>

  export type BoardsSelectScalar = {
    BoardId?: boolean
    CreatedAt?: boolean
    Title?: boolean
    UpdatedAt?: boolean
  }


  export type BoardsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BoardLists?: boolean | Boards$BoardListsArgs<ExtArgs>
    BoardMembers?: boolean | Boards$BoardMembersArgs<ExtArgs>
    _count?: boolean | BoardsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $BoardsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Boards"
    objects: {
      BoardLists: Prisma.$BoardListsPayload<ExtArgs>[]
      BoardMembers: Prisma.$BoardMembersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      BoardId: number
      CreatedAt: Date
      Title: string | null
      UpdatedAt: Date | null
    }, ExtArgs["result"]["boards"]>
    composites: {}
  }


  type BoardsGetPayload<S extends boolean | null | undefined | BoardsDefaultArgs> = $Result.GetResult<Prisma.$BoardsPayload, S>

  type BoardsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BoardsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BoardsCountAggregateInputType | true
    }

  export interface BoardsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Boards'], meta: { name: 'Boards' } }
    /**
     * Find zero or one Boards that matches the filter.
     * @param {BoardsFindUniqueArgs} args - Arguments to find a Boards
     * @example
     * // Get one Boards
     * const boards = await prisma.boards.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BoardsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BoardsFindUniqueArgs<ExtArgs>>
    ): Prisma__BoardsClient<$Result.GetResult<Prisma.$BoardsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Boards that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BoardsFindUniqueOrThrowArgs} args - Arguments to find a Boards
     * @example
     * // Get one Boards
     * const boards = await prisma.boards.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BoardsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BoardsClient<$Result.GetResult<Prisma.$BoardsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Boards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardsFindFirstArgs} args - Arguments to find a Boards
     * @example
     * // Get one Boards
     * const boards = await prisma.boards.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BoardsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardsFindFirstArgs<ExtArgs>>
    ): Prisma__BoardsClient<$Result.GetResult<Prisma.$BoardsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Boards that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardsFindFirstOrThrowArgs} args - Arguments to find a Boards
     * @example
     * // Get one Boards
     * const boards = await prisma.boards.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BoardsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BoardsClient<$Result.GetResult<Prisma.$BoardsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Boards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Boards
     * const boards = await prisma.boards.findMany()
     * 
     * // Get first 10 Boards
     * const boards = await prisma.boards.findMany({ take: 10 })
     * 
     * // Only select the `BoardId`
     * const boardsWithBoardIdOnly = await prisma.boards.findMany({ select: { BoardId: true } })
     * 
    **/
    findMany<T extends BoardsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Boards.
     * @param {BoardsCreateArgs} args - Arguments to create a Boards.
     * @example
     * // Create one Boards
     * const Boards = await prisma.boards.create({
     *   data: {
     *     // ... data to create a Boards
     *   }
     * })
     * 
    **/
    create<T extends BoardsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BoardsCreateArgs<ExtArgs>>
    ): Prisma__BoardsClient<$Result.GetResult<Prisma.$BoardsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Boards.
     *     @param {BoardsCreateManyArgs} args - Arguments to create many Boards.
     *     @example
     *     // Create many Boards
     *     const boards = await prisma.boards.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BoardsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Boards.
     * @param {BoardsDeleteArgs} args - Arguments to delete one Boards.
     * @example
     * // Delete one Boards
     * const Boards = await prisma.boards.delete({
     *   where: {
     *     // ... filter to delete one Boards
     *   }
     * })
     * 
    **/
    delete<T extends BoardsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BoardsDeleteArgs<ExtArgs>>
    ): Prisma__BoardsClient<$Result.GetResult<Prisma.$BoardsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Boards.
     * @param {BoardsUpdateArgs} args - Arguments to update one Boards.
     * @example
     * // Update one Boards
     * const boards = await prisma.boards.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BoardsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BoardsUpdateArgs<ExtArgs>>
    ): Prisma__BoardsClient<$Result.GetResult<Prisma.$BoardsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Boards.
     * @param {BoardsDeleteManyArgs} args - Arguments to filter Boards to delete.
     * @example
     * // Delete a few Boards
     * const { count } = await prisma.boards.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BoardsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Boards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Boards
     * const boards = await prisma.boards.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BoardsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BoardsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Boards.
     * @param {BoardsUpsertArgs} args - Arguments to update or create a Boards.
     * @example
     * // Update or create a Boards
     * const boards = await prisma.boards.upsert({
     *   create: {
     *     // ... data to create a Boards
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Boards we want to update
     *   }
     * })
    **/
    upsert<T extends BoardsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BoardsUpsertArgs<ExtArgs>>
    ): Prisma__BoardsClient<$Result.GetResult<Prisma.$BoardsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Boards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardsCountArgs} args - Arguments to filter Boards to count.
     * @example
     * // Count the number of Boards
     * const count = await prisma.boards.count({
     *   where: {
     *     // ... the filter for the Boards we want to count
     *   }
     * })
    **/
    count<T extends BoardsCountArgs>(
      args?: Subset<T, BoardsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BoardsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Boards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BoardsAggregateArgs>(args: Subset<T, BoardsAggregateArgs>): Prisma.PrismaPromise<GetBoardsAggregateType<T>>

    /**
     * Group by Boards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BoardsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BoardsGroupByArgs['orderBy'] }
        : { orderBy?: BoardsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BoardsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBoardsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Boards model
   */
  readonly fields: BoardsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Boards.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BoardsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    BoardLists<T extends Boards$BoardListsArgs<ExtArgs> = {}>(args?: Subset<T, Boards$BoardListsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardListsPayload<ExtArgs>, T, 'findMany'> | Null>;

    BoardMembers<T extends Boards$BoardMembersArgs<ExtArgs> = {}>(args?: Subset<T, Boards$BoardMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardMembersPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Boards model
   */ 
  interface BoardsFieldRefs {
    readonly BoardId: FieldRef<"Boards", 'Int'>
    readonly CreatedAt: FieldRef<"Boards", 'DateTime'>
    readonly Title: FieldRef<"Boards", 'String'>
    readonly UpdatedAt: FieldRef<"Boards", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Boards findUnique
   */
  export type BoardsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boards
     */
    select?: BoardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardsInclude<ExtArgs> | null
    /**
     * Filter, which Boards to fetch.
     */
    where: BoardsWhereUniqueInput
  }

  /**
   * Boards findUniqueOrThrow
   */
  export type BoardsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boards
     */
    select?: BoardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardsInclude<ExtArgs> | null
    /**
     * Filter, which Boards to fetch.
     */
    where: BoardsWhereUniqueInput
  }

  /**
   * Boards findFirst
   */
  export type BoardsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boards
     */
    select?: BoardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardsInclude<ExtArgs> | null
    /**
     * Filter, which Boards to fetch.
     */
    where?: BoardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardsOrderByWithRelationInput | BoardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Boards.
     */
    cursor?: BoardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Boards.
     */
    distinct?: BoardsScalarFieldEnum | BoardsScalarFieldEnum[]
  }

  /**
   * Boards findFirstOrThrow
   */
  export type BoardsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boards
     */
    select?: BoardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardsInclude<ExtArgs> | null
    /**
     * Filter, which Boards to fetch.
     */
    where?: BoardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardsOrderByWithRelationInput | BoardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Boards.
     */
    cursor?: BoardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Boards.
     */
    distinct?: BoardsScalarFieldEnum | BoardsScalarFieldEnum[]
  }

  /**
   * Boards findMany
   */
  export type BoardsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boards
     */
    select?: BoardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardsInclude<ExtArgs> | null
    /**
     * Filter, which Boards to fetch.
     */
    where?: BoardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardsOrderByWithRelationInput | BoardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Boards.
     */
    cursor?: BoardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    distinct?: BoardsScalarFieldEnum | BoardsScalarFieldEnum[]
  }

  /**
   * Boards create
   */
  export type BoardsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boards
     */
    select?: BoardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardsInclude<ExtArgs> | null
    /**
     * The data needed to create a Boards.
     */
    data?: XOR<BoardsCreateInput, BoardsUncheckedCreateInput>
  }

  /**
   * Boards createMany
   */
  export type BoardsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Boards.
     */
    data: BoardsCreateManyInput | BoardsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Boards update
   */
  export type BoardsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boards
     */
    select?: BoardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardsInclude<ExtArgs> | null
    /**
     * The data needed to update a Boards.
     */
    data: XOR<BoardsUpdateInput, BoardsUncheckedUpdateInput>
    /**
     * Choose, which Boards to update.
     */
    where: BoardsWhereUniqueInput
  }

  /**
   * Boards updateMany
   */
  export type BoardsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Boards.
     */
    data: XOR<BoardsUpdateManyMutationInput, BoardsUncheckedUpdateManyInput>
    /**
     * Filter which Boards to update
     */
    where?: BoardsWhereInput
  }

  /**
   * Boards upsert
   */
  export type BoardsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boards
     */
    select?: BoardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardsInclude<ExtArgs> | null
    /**
     * The filter to search for the Boards to update in case it exists.
     */
    where: BoardsWhereUniqueInput
    /**
     * In case the Boards found by the `where` argument doesn't exist, create a new Boards with this data.
     */
    create: XOR<BoardsCreateInput, BoardsUncheckedCreateInput>
    /**
     * In case the Boards was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BoardsUpdateInput, BoardsUncheckedUpdateInput>
  }

  /**
   * Boards delete
   */
  export type BoardsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boards
     */
    select?: BoardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardsInclude<ExtArgs> | null
    /**
     * Filter which Boards to delete.
     */
    where: BoardsWhereUniqueInput
  }

  /**
   * Boards deleteMany
   */
  export type BoardsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Boards to delete
     */
    where?: BoardsWhereInput
  }

  /**
   * Boards.BoardLists
   */
  export type Boards$BoardListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardLists
     */
    select?: BoardListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardListsInclude<ExtArgs> | null
    where?: BoardListsWhereInput
    orderBy?: BoardListsOrderByWithRelationInput | BoardListsOrderByWithRelationInput[]
    cursor?: BoardListsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BoardListsScalarFieldEnum | BoardListsScalarFieldEnum[]
  }

  /**
   * Boards.BoardMembers
   */
  export type Boards$BoardMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMembers
     */
    select?: BoardMembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMembersInclude<ExtArgs> | null
    where?: BoardMembersWhereInput
    orderBy?: BoardMembersOrderByWithRelationInput | BoardMembersOrderByWithRelationInput[]
    cursor?: BoardMembersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BoardMembersScalarFieldEnum | BoardMembersScalarFieldEnum[]
  }

  /**
   * Boards without action
   */
  export type BoardsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boards
     */
    select?: BoardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardsInclude<ExtArgs> | null
  }


  /**
   * Model Cards
   */

  export type AggregateCards = {
    _count: CardsCountAggregateOutputType | null
    _avg: CardsAvgAggregateOutputType | null
    _sum: CardsSumAggregateOutputType | null
    _min: CardsMinAggregateOutputType | null
    _max: CardsMaxAggregateOutputType | null
  }

  export type CardsAvgAggregateOutputType = {
    CardId: number | null
  }

  export type CardsSumAggregateOutputType = {
    CardId: number | null
  }

  export type CardsMinAggregateOutputType = {
    CardId: number | null
    Title: string | null
    DueDate: Date | null
    Description: string | null
    ReminderDate: Date | null
  }

  export type CardsMaxAggregateOutputType = {
    CardId: number | null
    Title: string | null
    DueDate: Date | null
    Description: string | null
    ReminderDate: Date | null
  }

  export type CardsCountAggregateOutputType = {
    CardId: number
    Title: number
    DueDate: number
    Description: number
    ReminderDate: number
    _all: number
  }


  export type CardsAvgAggregateInputType = {
    CardId?: true
  }

  export type CardsSumAggregateInputType = {
    CardId?: true
  }

  export type CardsMinAggregateInputType = {
    CardId?: true
    Title?: true
    DueDate?: true
    Description?: true
    ReminderDate?: true
  }

  export type CardsMaxAggregateInputType = {
    CardId?: true
    Title?: true
    DueDate?: true
    Description?: true
    ReminderDate?: true
  }

  export type CardsCountAggregateInputType = {
    CardId?: true
    Title?: true
    DueDate?: true
    Description?: true
    ReminderDate?: true
    _all?: true
  }

  export type CardsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cards to aggregate.
     */
    where?: CardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: CardsOrderByWithRelationInput | CardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cards
    **/
    _count?: true | CardsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CardsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CardsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardsMaxAggregateInputType
  }

  export type GetCardsAggregateType<T extends CardsAggregateArgs> = {
        [P in keyof T & keyof AggregateCards]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCards[P]>
      : GetScalarType<T[P], AggregateCards[P]>
  }




  export type CardsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardsWhereInput
    orderBy?: CardsOrderByWithAggregationInput | CardsOrderByWithAggregationInput[]
    by: CardsScalarFieldEnum[] | CardsScalarFieldEnum
    having?: CardsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardsCountAggregateInputType | true
    _avg?: CardsAvgAggregateInputType
    _sum?: CardsSumAggregateInputType
    _min?: CardsMinAggregateInputType
    _max?: CardsMaxAggregateInputType
  }

  export type CardsGroupByOutputType = {
    CardId: number
    Title: string | null
    DueDate: Date | null
    Description: string | null
    ReminderDate: Date | null
    _count: CardsCountAggregateOutputType | null
    _avg: CardsAvgAggregateOutputType | null
    _sum: CardsSumAggregateOutputType | null
    _min: CardsMinAggregateOutputType | null
    _max: CardsMaxAggregateOutputType | null
  }

  type GetCardsGroupByPayload<T extends CardsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CardsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardsGroupByOutputType[P]>
            : GetScalarType<T[P], CardsGroupByOutputType[P]>
        }
      >
    >


  export type CardsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    CardId?: boolean
    Title?: boolean
    DueDate?: boolean
    Description?: boolean
    ReminderDate?: boolean
    CheckLists?: boolean | Cards$CheckListsArgs<ExtArgs>
    Comments?: boolean | Cards$CommentsArgs<ExtArgs>
    ListCards?: boolean | Cards$ListCardsArgs<ExtArgs>
    _count?: boolean | CardsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cards"]>

  export type CardsSelectScalar = {
    CardId?: boolean
    Title?: boolean
    DueDate?: boolean
    Description?: boolean
    ReminderDate?: boolean
  }


  export type CardsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CheckLists?: boolean | Cards$CheckListsArgs<ExtArgs>
    Comments?: boolean | Cards$CommentsArgs<ExtArgs>
    ListCards?: boolean | Cards$ListCardsArgs<ExtArgs>
    _count?: boolean | CardsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CardsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cards"
    objects: {
      CheckLists: Prisma.$CheckListsPayload<ExtArgs>[]
      Comments: Prisma.$CommentsPayload<ExtArgs>[]
      ListCards: Prisma.$ListCardsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      CardId: number
      Title: string | null
      DueDate: Date | null
      Description: string | null
      ReminderDate: Date | null
    }, ExtArgs["result"]["cards"]>
    composites: {}
  }


  type CardsGetPayload<S extends boolean | null | undefined | CardsDefaultArgs> = $Result.GetResult<Prisma.$CardsPayload, S>

  type CardsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CardsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CardsCountAggregateInputType | true
    }

  export interface CardsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cards'], meta: { name: 'Cards' } }
    /**
     * Find zero or one Cards that matches the filter.
     * @param {CardsFindUniqueArgs} args - Arguments to find a Cards
     * @example
     * // Get one Cards
     * const cards = await prisma.cards.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CardsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CardsFindUniqueArgs<ExtArgs>>
    ): Prisma__CardsClient<$Result.GetResult<Prisma.$CardsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cards that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CardsFindUniqueOrThrowArgs} args - Arguments to find a Cards
     * @example
     * // Get one Cards
     * const cards = await prisma.cards.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CardsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CardsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CardsClient<$Result.GetResult<Prisma.$CardsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardsFindFirstArgs} args - Arguments to find a Cards
     * @example
     * // Get one Cards
     * const cards = await prisma.cards.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CardsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CardsFindFirstArgs<ExtArgs>>
    ): Prisma__CardsClient<$Result.GetResult<Prisma.$CardsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cards that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardsFindFirstOrThrowArgs} args - Arguments to find a Cards
     * @example
     * // Get one Cards
     * const cards = await prisma.cards.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CardsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CardsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CardsClient<$Result.GetResult<Prisma.$CardsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Cards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cards
     * const cards = await prisma.cards.findMany()
     * 
     * // Get first 10 Cards
     * const cards = await prisma.cards.findMany({ take: 10 })
     * 
     * // Only select the `CardId`
     * const cardsWithCardIdOnly = await prisma.cards.findMany({ select: { CardId: true } })
     * 
    **/
    findMany<T extends CardsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CardsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cards.
     * @param {CardsCreateArgs} args - Arguments to create a Cards.
     * @example
     * // Create one Cards
     * const Cards = await prisma.cards.create({
     *   data: {
     *     // ... data to create a Cards
     *   }
     * })
     * 
    **/
    create<T extends CardsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CardsCreateArgs<ExtArgs>>
    ): Prisma__CardsClient<$Result.GetResult<Prisma.$CardsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Cards.
     *     @param {CardsCreateManyArgs} args - Arguments to create many Cards.
     *     @example
     *     // Create many Cards
     *     const cards = await prisma.cards.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CardsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CardsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cards.
     * @param {CardsDeleteArgs} args - Arguments to delete one Cards.
     * @example
     * // Delete one Cards
     * const Cards = await prisma.cards.delete({
     *   where: {
     *     // ... filter to delete one Cards
     *   }
     * })
     * 
    **/
    delete<T extends CardsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CardsDeleteArgs<ExtArgs>>
    ): Prisma__CardsClient<$Result.GetResult<Prisma.$CardsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cards.
     * @param {CardsUpdateArgs} args - Arguments to update one Cards.
     * @example
     * // Update one Cards
     * const cards = await prisma.cards.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CardsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CardsUpdateArgs<ExtArgs>>
    ): Prisma__CardsClient<$Result.GetResult<Prisma.$CardsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Cards.
     * @param {CardsDeleteManyArgs} args - Arguments to filter Cards to delete.
     * @example
     * // Delete a few Cards
     * const { count } = await prisma.cards.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CardsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CardsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cards
     * const cards = await prisma.cards.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CardsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CardsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cards.
     * @param {CardsUpsertArgs} args - Arguments to update or create a Cards.
     * @example
     * // Update or create a Cards
     * const cards = await prisma.cards.upsert({
     *   create: {
     *     // ... data to create a Cards
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cards we want to update
     *   }
     * })
    **/
    upsert<T extends CardsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CardsUpsertArgs<ExtArgs>>
    ): Prisma__CardsClient<$Result.GetResult<Prisma.$CardsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardsCountArgs} args - Arguments to filter Cards to count.
     * @example
     * // Count the number of Cards
     * const count = await prisma.cards.count({
     *   where: {
     *     // ... the filter for the Cards we want to count
     *   }
     * })
    **/
    count<T extends CardsCountArgs>(
      args?: Subset<T, CardsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardsAggregateArgs>(args: Subset<T, CardsAggregateArgs>): Prisma.PrismaPromise<GetCardsAggregateType<T>>

    /**
     * Group by Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CardsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CardsGroupByArgs['orderBy'] }
        : { orderBy?: CardsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CardsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cards model
   */
  readonly fields: CardsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cards.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CardsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    CheckLists<T extends Cards$CheckListsArgs<ExtArgs> = {}>(args?: Subset<T, Cards$CheckListsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckListsPayload<ExtArgs>, T, 'findMany'> | Null>;

    Comments<T extends Cards$CommentsArgs<ExtArgs> = {}>(args?: Subset<T, Cards$CommentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, 'findMany'> | Null>;

    ListCards<T extends Cards$ListCardsArgs<ExtArgs> = {}>(args?: Subset<T, Cards$ListCardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListCardsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Cards model
   */ 
  interface CardsFieldRefs {
    readonly CardId: FieldRef<"Cards", 'Int'>
    readonly Title: FieldRef<"Cards", 'String'>
    readonly DueDate: FieldRef<"Cards", 'DateTime'>
    readonly Description: FieldRef<"Cards", 'String'>
    readonly ReminderDate: FieldRef<"Cards", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Cards findUnique
   */
  export type CardsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cards
     */
    select?: CardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardsInclude<ExtArgs> | null
    /**
     * Filter, which Cards to fetch.
     */
    where: CardsWhereUniqueInput
  }

  /**
   * Cards findUniqueOrThrow
   */
  export type CardsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cards
     */
    select?: CardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardsInclude<ExtArgs> | null
    /**
     * Filter, which Cards to fetch.
     */
    where: CardsWhereUniqueInput
  }

  /**
   * Cards findFirst
   */
  export type CardsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cards
     */
    select?: CardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardsInclude<ExtArgs> | null
    /**
     * Filter, which Cards to fetch.
     */
    where?: CardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: CardsOrderByWithRelationInput | CardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cards.
     */
    cursor?: CardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cards.
     */
    distinct?: CardsScalarFieldEnum | CardsScalarFieldEnum[]
  }

  /**
   * Cards findFirstOrThrow
   */
  export type CardsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cards
     */
    select?: CardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardsInclude<ExtArgs> | null
    /**
     * Filter, which Cards to fetch.
     */
    where?: CardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: CardsOrderByWithRelationInput | CardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cards.
     */
    cursor?: CardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cards.
     */
    distinct?: CardsScalarFieldEnum | CardsScalarFieldEnum[]
  }

  /**
   * Cards findMany
   */
  export type CardsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cards
     */
    select?: CardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardsInclude<ExtArgs> | null
    /**
     * Filter, which Cards to fetch.
     */
    where?: CardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: CardsOrderByWithRelationInput | CardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cards.
     */
    cursor?: CardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    distinct?: CardsScalarFieldEnum | CardsScalarFieldEnum[]
  }

  /**
   * Cards create
   */
  export type CardsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cards
     */
    select?: CardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardsInclude<ExtArgs> | null
    /**
     * The data needed to create a Cards.
     */
    data?: XOR<CardsCreateInput, CardsUncheckedCreateInput>
  }

  /**
   * Cards createMany
   */
  export type CardsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cards.
     */
    data: CardsCreateManyInput | CardsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cards update
   */
  export type CardsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cards
     */
    select?: CardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardsInclude<ExtArgs> | null
    /**
     * The data needed to update a Cards.
     */
    data: XOR<CardsUpdateInput, CardsUncheckedUpdateInput>
    /**
     * Choose, which Cards to update.
     */
    where: CardsWhereUniqueInput
  }

  /**
   * Cards updateMany
   */
  export type CardsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cards.
     */
    data: XOR<CardsUpdateManyMutationInput, CardsUncheckedUpdateManyInput>
    /**
     * Filter which Cards to update
     */
    where?: CardsWhereInput
  }

  /**
   * Cards upsert
   */
  export type CardsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cards
     */
    select?: CardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardsInclude<ExtArgs> | null
    /**
     * The filter to search for the Cards to update in case it exists.
     */
    where: CardsWhereUniqueInput
    /**
     * In case the Cards found by the `where` argument doesn't exist, create a new Cards with this data.
     */
    create: XOR<CardsCreateInput, CardsUncheckedCreateInput>
    /**
     * In case the Cards was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CardsUpdateInput, CardsUncheckedUpdateInput>
  }

  /**
   * Cards delete
   */
  export type CardsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cards
     */
    select?: CardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardsInclude<ExtArgs> | null
    /**
     * Filter which Cards to delete.
     */
    where: CardsWhereUniqueInput
  }

  /**
   * Cards deleteMany
   */
  export type CardsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cards to delete
     */
    where?: CardsWhereInput
  }

  /**
   * Cards.CheckLists
   */
  export type Cards$CheckListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckLists
     */
    select?: CheckListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckListsInclude<ExtArgs> | null
    where?: CheckListsWhereInput
    orderBy?: CheckListsOrderByWithRelationInput | CheckListsOrderByWithRelationInput[]
    cursor?: CheckListsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CheckListsScalarFieldEnum | CheckListsScalarFieldEnum[]
  }

  /**
   * Cards.Comments
   */
  export type Cards$CommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    where?: CommentsWhereInput
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    cursor?: CommentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * Cards.ListCards
   */
  export type Cards$ListCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListCards
     */
    select?: ListCardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListCardsInclude<ExtArgs> | null
    where?: ListCardsWhereInput
    orderBy?: ListCardsOrderByWithRelationInput | ListCardsOrderByWithRelationInput[]
    cursor?: ListCardsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ListCardsScalarFieldEnum | ListCardsScalarFieldEnum[]
  }

  /**
   * Cards without action
   */
  export type CardsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cards
     */
    select?: CardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardsInclude<ExtArgs> | null
  }


  /**
   * Model CheckLists
   */

  export type AggregateCheckLists = {
    _count: CheckListsCountAggregateOutputType | null
    _avg: CheckListsAvgAggregateOutputType | null
    _sum: CheckListsSumAggregateOutputType | null
    _min: CheckListsMinAggregateOutputType | null
    _max: CheckListsMaxAggregateOutputType | null
  }

  export type CheckListsAvgAggregateOutputType = {
    CheckListId: number | null
    CardId: number | null
  }

  export type CheckListsSumAggregateOutputType = {
    CheckListId: number | null
    CardId: number | null
  }

  export type CheckListsMinAggregateOutputType = {
    CheckListId: number | null
    IsChecked: boolean | null
    Title: string | null
    CardId: number | null
  }

  export type CheckListsMaxAggregateOutputType = {
    CheckListId: number | null
    IsChecked: boolean | null
    Title: string | null
    CardId: number | null
  }

  export type CheckListsCountAggregateOutputType = {
    CheckListId: number
    IsChecked: number
    Title: number
    CardId: number
    _all: number
  }


  export type CheckListsAvgAggregateInputType = {
    CheckListId?: true
    CardId?: true
  }

  export type CheckListsSumAggregateInputType = {
    CheckListId?: true
    CardId?: true
  }

  export type CheckListsMinAggregateInputType = {
    CheckListId?: true
    IsChecked?: true
    Title?: true
    CardId?: true
  }

  export type CheckListsMaxAggregateInputType = {
    CheckListId?: true
    IsChecked?: true
    Title?: true
    CardId?: true
  }

  export type CheckListsCountAggregateInputType = {
    CheckListId?: true
    IsChecked?: true
    Title?: true
    CardId?: true
    _all?: true
  }

  export type CheckListsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CheckLists to aggregate.
     */
    where?: CheckListsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckLists to fetch.
     */
    orderBy?: CheckListsOrderByWithRelationInput | CheckListsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CheckListsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CheckLists
    **/
    _count?: true | CheckListsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CheckListsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CheckListsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CheckListsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CheckListsMaxAggregateInputType
  }

  export type GetCheckListsAggregateType<T extends CheckListsAggregateArgs> = {
        [P in keyof T & keyof AggregateCheckLists]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCheckLists[P]>
      : GetScalarType<T[P], AggregateCheckLists[P]>
  }




  export type CheckListsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CheckListsWhereInput
    orderBy?: CheckListsOrderByWithAggregationInput | CheckListsOrderByWithAggregationInput[]
    by: CheckListsScalarFieldEnum[] | CheckListsScalarFieldEnum
    having?: CheckListsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CheckListsCountAggregateInputType | true
    _avg?: CheckListsAvgAggregateInputType
    _sum?: CheckListsSumAggregateInputType
    _min?: CheckListsMinAggregateInputType
    _max?: CheckListsMaxAggregateInputType
  }

  export type CheckListsGroupByOutputType = {
    CheckListId: number
    IsChecked: boolean | null
    Title: string | null
    CardId: number | null
    _count: CheckListsCountAggregateOutputType | null
    _avg: CheckListsAvgAggregateOutputType | null
    _sum: CheckListsSumAggregateOutputType | null
    _min: CheckListsMinAggregateOutputType | null
    _max: CheckListsMaxAggregateOutputType | null
  }

  type GetCheckListsGroupByPayload<T extends CheckListsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CheckListsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CheckListsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CheckListsGroupByOutputType[P]>
            : GetScalarType<T[P], CheckListsGroupByOutputType[P]>
        }
      >
    >


  export type CheckListsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    CheckListId?: boolean
    IsChecked?: boolean
    Title?: boolean
    CardId?: boolean
    Cards?: boolean | CheckLists$CardsArgs<ExtArgs>
  }, ExtArgs["result"]["checkLists"]>

  export type CheckListsSelectScalar = {
    CheckListId?: boolean
    IsChecked?: boolean
    Title?: boolean
    CardId?: boolean
  }


  export type CheckListsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Cards?: boolean | CheckLists$CardsArgs<ExtArgs>
  }


  export type $CheckListsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CheckLists"
    objects: {
      Cards: Prisma.$CardsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      CheckListId: number
      IsChecked: boolean | null
      Title: string | null
      CardId: number | null
    }, ExtArgs["result"]["checkLists"]>
    composites: {}
  }


  type CheckListsGetPayload<S extends boolean | null | undefined | CheckListsDefaultArgs> = $Result.GetResult<Prisma.$CheckListsPayload, S>

  type CheckListsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CheckListsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CheckListsCountAggregateInputType | true
    }

  export interface CheckListsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CheckLists'], meta: { name: 'CheckLists' } }
    /**
     * Find zero or one CheckLists that matches the filter.
     * @param {CheckListsFindUniqueArgs} args - Arguments to find a CheckLists
     * @example
     * // Get one CheckLists
     * const checkLists = await prisma.checkLists.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CheckListsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CheckListsFindUniqueArgs<ExtArgs>>
    ): Prisma__CheckListsClient<$Result.GetResult<Prisma.$CheckListsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CheckLists that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CheckListsFindUniqueOrThrowArgs} args - Arguments to find a CheckLists
     * @example
     * // Get one CheckLists
     * const checkLists = await prisma.checkLists.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CheckListsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CheckListsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CheckListsClient<$Result.GetResult<Prisma.$CheckListsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CheckLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckListsFindFirstArgs} args - Arguments to find a CheckLists
     * @example
     * // Get one CheckLists
     * const checkLists = await prisma.checkLists.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CheckListsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CheckListsFindFirstArgs<ExtArgs>>
    ): Prisma__CheckListsClient<$Result.GetResult<Prisma.$CheckListsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CheckLists that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckListsFindFirstOrThrowArgs} args - Arguments to find a CheckLists
     * @example
     * // Get one CheckLists
     * const checkLists = await prisma.checkLists.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CheckListsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CheckListsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CheckListsClient<$Result.GetResult<Prisma.$CheckListsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CheckLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckListsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CheckLists
     * const checkLists = await prisma.checkLists.findMany()
     * 
     * // Get first 10 CheckLists
     * const checkLists = await prisma.checkLists.findMany({ take: 10 })
     * 
     * // Only select the `CheckListId`
     * const checkListsWithCheckListIdOnly = await prisma.checkLists.findMany({ select: { CheckListId: true } })
     * 
    **/
    findMany<T extends CheckListsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CheckListsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckListsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CheckLists.
     * @param {CheckListsCreateArgs} args - Arguments to create a CheckLists.
     * @example
     * // Create one CheckLists
     * const CheckLists = await prisma.checkLists.create({
     *   data: {
     *     // ... data to create a CheckLists
     *   }
     * })
     * 
    **/
    create<T extends CheckListsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CheckListsCreateArgs<ExtArgs>>
    ): Prisma__CheckListsClient<$Result.GetResult<Prisma.$CheckListsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CheckLists.
     *     @param {CheckListsCreateManyArgs} args - Arguments to create many CheckLists.
     *     @example
     *     // Create many CheckLists
     *     const checkLists = await prisma.checkLists.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CheckListsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CheckListsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CheckLists.
     * @param {CheckListsDeleteArgs} args - Arguments to delete one CheckLists.
     * @example
     * // Delete one CheckLists
     * const CheckLists = await prisma.checkLists.delete({
     *   where: {
     *     // ... filter to delete one CheckLists
     *   }
     * })
     * 
    **/
    delete<T extends CheckListsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CheckListsDeleteArgs<ExtArgs>>
    ): Prisma__CheckListsClient<$Result.GetResult<Prisma.$CheckListsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CheckLists.
     * @param {CheckListsUpdateArgs} args - Arguments to update one CheckLists.
     * @example
     * // Update one CheckLists
     * const checkLists = await prisma.checkLists.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CheckListsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CheckListsUpdateArgs<ExtArgs>>
    ): Prisma__CheckListsClient<$Result.GetResult<Prisma.$CheckListsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CheckLists.
     * @param {CheckListsDeleteManyArgs} args - Arguments to filter CheckLists to delete.
     * @example
     * // Delete a few CheckLists
     * const { count } = await prisma.checkLists.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CheckListsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CheckListsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CheckLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckListsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CheckLists
     * const checkLists = await prisma.checkLists.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CheckListsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CheckListsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CheckLists.
     * @param {CheckListsUpsertArgs} args - Arguments to update or create a CheckLists.
     * @example
     * // Update or create a CheckLists
     * const checkLists = await prisma.checkLists.upsert({
     *   create: {
     *     // ... data to create a CheckLists
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CheckLists we want to update
     *   }
     * })
    **/
    upsert<T extends CheckListsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CheckListsUpsertArgs<ExtArgs>>
    ): Prisma__CheckListsClient<$Result.GetResult<Prisma.$CheckListsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CheckLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckListsCountArgs} args - Arguments to filter CheckLists to count.
     * @example
     * // Count the number of CheckLists
     * const count = await prisma.checkLists.count({
     *   where: {
     *     // ... the filter for the CheckLists we want to count
     *   }
     * })
    **/
    count<T extends CheckListsCountArgs>(
      args?: Subset<T, CheckListsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CheckListsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CheckLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckListsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CheckListsAggregateArgs>(args: Subset<T, CheckListsAggregateArgs>): Prisma.PrismaPromise<GetCheckListsAggregateType<T>>

    /**
     * Group by CheckLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckListsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CheckListsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CheckListsGroupByArgs['orderBy'] }
        : { orderBy?: CheckListsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CheckListsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCheckListsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CheckLists model
   */
  readonly fields: CheckListsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CheckLists.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CheckListsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Cards<T extends CheckLists$CardsArgs<ExtArgs> = {}>(args?: Subset<T, CheckLists$CardsArgs<ExtArgs>>): Prisma__CardsClient<$Result.GetResult<Prisma.$CardsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CheckLists model
   */ 
  interface CheckListsFieldRefs {
    readonly CheckListId: FieldRef<"CheckLists", 'Int'>
    readonly IsChecked: FieldRef<"CheckLists", 'Boolean'>
    readonly Title: FieldRef<"CheckLists", 'String'>
    readonly CardId: FieldRef<"CheckLists", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CheckLists findUnique
   */
  export type CheckListsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckLists
     */
    select?: CheckListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckListsInclude<ExtArgs> | null
    /**
     * Filter, which CheckLists to fetch.
     */
    where: CheckListsWhereUniqueInput
  }

  /**
   * CheckLists findUniqueOrThrow
   */
  export type CheckListsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckLists
     */
    select?: CheckListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckListsInclude<ExtArgs> | null
    /**
     * Filter, which CheckLists to fetch.
     */
    where: CheckListsWhereUniqueInput
  }

  /**
   * CheckLists findFirst
   */
  export type CheckListsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckLists
     */
    select?: CheckListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckListsInclude<ExtArgs> | null
    /**
     * Filter, which CheckLists to fetch.
     */
    where?: CheckListsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckLists to fetch.
     */
    orderBy?: CheckListsOrderByWithRelationInput | CheckListsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CheckLists.
     */
    cursor?: CheckListsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CheckLists.
     */
    distinct?: CheckListsScalarFieldEnum | CheckListsScalarFieldEnum[]
  }

  /**
   * CheckLists findFirstOrThrow
   */
  export type CheckListsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckLists
     */
    select?: CheckListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckListsInclude<ExtArgs> | null
    /**
     * Filter, which CheckLists to fetch.
     */
    where?: CheckListsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckLists to fetch.
     */
    orderBy?: CheckListsOrderByWithRelationInput | CheckListsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CheckLists.
     */
    cursor?: CheckListsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CheckLists.
     */
    distinct?: CheckListsScalarFieldEnum | CheckListsScalarFieldEnum[]
  }

  /**
   * CheckLists findMany
   */
  export type CheckListsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckLists
     */
    select?: CheckListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckListsInclude<ExtArgs> | null
    /**
     * Filter, which CheckLists to fetch.
     */
    where?: CheckListsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckLists to fetch.
     */
    orderBy?: CheckListsOrderByWithRelationInput | CheckListsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CheckLists.
     */
    cursor?: CheckListsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckLists.
     */
    skip?: number
    distinct?: CheckListsScalarFieldEnum | CheckListsScalarFieldEnum[]
  }

  /**
   * CheckLists create
   */
  export type CheckListsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckLists
     */
    select?: CheckListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckListsInclude<ExtArgs> | null
    /**
     * The data needed to create a CheckLists.
     */
    data?: XOR<CheckListsCreateInput, CheckListsUncheckedCreateInput>
  }

  /**
   * CheckLists createMany
   */
  export type CheckListsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CheckLists.
     */
    data: CheckListsCreateManyInput | CheckListsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CheckLists update
   */
  export type CheckListsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckLists
     */
    select?: CheckListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckListsInclude<ExtArgs> | null
    /**
     * The data needed to update a CheckLists.
     */
    data: XOR<CheckListsUpdateInput, CheckListsUncheckedUpdateInput>
    /**
     * Choose, which CheckLists to update.
     */
    where: CheckListsWhereUniqueInput
  }

  /**
   * CheckLists updateMany
   */
  export type CheckListsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CheckLists.
     */
    data: XOR<CheckListsUpdateManyMutationInput, CheckListsUncheckedUpdateManyInput>
    /**
     * Filter which CheckLists to update
     */
    where?: CheckListsWhereInput
  }

  /**
   * CheckLists upsert
   */
  export type CheckListsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckLists
     */
    select?: CheckListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckListsInclude<ExtArgs> | null
    /**
     * The filter to search for the CheckLists to update in case it exists.
     */
    where: CheckListsWhereUniqueInput
    /**
     * In case the CheckLists found by the `where` argument doesn't exist, create a new CheckLists with this data.
     */
    create: XOR<CheckListsCreateInput, CheckListsUncheckedCreateInput>
    /**
     * In case the CheckLists was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CheckListsUpdateInput, CheckListsUncheckedUpdateInput>
  }

  /**
   * CheckLists delete
   */
  export type CheckListsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckLists
     */
    select?: CheckListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckListsInclude<ExtArgs> | null
    /**
     * Filter which CheckLists to delete.
     */
    where: CheckListsWhereUniqueInput
  }

  /**
   * CheckLists deleteMany
   */
  export type CheckListsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CheckLists to delete
     */
    where?: CheckListsWhereInput
  }

  /**
   * CheckLists.Cards
   */
  export type CheckLists$CardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cards
     */
    select?: CardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardsInclude<ExtArgs> | null
    where?: CardsWhereInput
  }

  /**
   * CheckLists without action
   */
  export type CheckListsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckLists
     */
    select?: CheckListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckListsInclude<ExtArgs> | null
  }


  /**
   * Model Comments
   */

  export type AggregateComments = {
    _count: CommentsCountAggregateOutputType | null
    _avg: CommentsAvgAggregateOutputType | null
    _sum: CommentsSumAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  export type CommentsAvgAggregateOutputType = {
    CommentId: number | null
    CardId: number | null
  }

  export type CommentsSumAggregateOutputType = {
    CommentId: number | null
    CardId: number | null
  }

  export type CommentsMinAggregateOutputType = {
    CommentId: number | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
    Comment: string | null
    CardId: number | null
  }

  export type CommentsMaxAggregateOutputType = {
    CommentId: number | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
    Comment: string | null
    CardId: number | null
  }

  export type CommentsCountAggregateOutputType = {
    CommentId: number
    CreatedAt: number
    UpdatedAt: number
    Comment: number
    CardId: number
    _all: number
  }


  export type CommentsAvgAggregateInputType = {
    CommentId?: true
    CardId?: true
  }

  export type CommentsSumAggregateInputType = {
    CommentId?: true
    CardId?: true
  }

  export type CommentsMinAggregateInputType = {
    CommentId?: true
    CreatedAt?: true
    UpdatedAt?: true
    Comment?: true
    CardId?: true
  }

  export type CommentsMaxAggregateInputType = {
    CommentId?: true
    CreatedAt?: true
    UpdatedAt?: true
    Comment?: true
    CardId?: true
  }

  export type CommentsCountAggregateInputType = {
    CommentId?: true
    CreatedAt?: true
    UpdatedAt?: true
    Comment?: true
    CardId?: true
    _all?: true
  }

  export type CommentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to aggregate.
     */
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentsMaxAggregateInputType
  }

  export type GetCommentsAggregateType<T extends CommentsAggregateArgs> = {
        [P in keyof T & keyof AggregateComments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComments[P]>
      : GetScalarType<T[P], AggregateComments[P]>
  }




  export type CommentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentsWhereInput
    orderBy?: CommentsOrderByWithAggregationInput | CommentsOrderByWithAggregationInput[]
    by: CommentsScalarFieldEnum[] | CommentsScalarFieldEnum
    having?: CommentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentsCountAggregateInputType | true
    _avg?: CommentsAvgAggregateInputType
    _sum?: CommentsSumAggregateInputType
    _min?: CommentsMinAggregateInputType
    _max?: CommentsMaxAggregateInputType
  }

  export type CommentsGroupByOutputType = {
    CommentId: number
    CreatedAt: Date
    UpdatedAt: Date | null
    Comment: string | null
    CardId: number | null
    _count: CommentsCountAggregateOutputType | null
    _avg: CommentsAvgAggregateOutputType | null
    _sum: CommentsSumAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  type GetCommentsGroupByPayload<T extends CommentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentsGroupByOutputType[P]>
            : GetScalarType<T[P], CommentsGroupByOutputType[P]>
        }
      >
    >


  export type CommentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    CommentId?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    Comment?: boolean
    CardId?: boolean
    Cards?: boolean | Comments$CardsArgs<ExtArgs>
  }, ExtArgs["result"]["comments"]>

  export type CommentsSelectScalar = {
    CommentId?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    Comment?: boolean
    CardId?: boolean
  }


  export type CommentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Cards?: boolean | Comments$CardsArgs<ExtArgs>
  }


  export type $CommentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comments"
    objects: {
      Cards: Prisma.$CardsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      CommentId: number
      CreatedAt: Date
      UpdatedAt: Date | null
      Comment: string | null
      CardId: number | null
    }, ExtArgs["result"]["comments"]>
    composites: {}
  }


  type CommentsGetPayload<S extends boolean | null | undefined | CommentsDefaultArgs> = $Result.GetResult<Prisma.$CommentsPayload, S>

  type CommentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommentsCountAggregateInputType | true
    }

  export interface CommentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comments'], meta: { name: 'Comments' } }
    /**
     * Find zero or one Comments that matches the filter.
     * @param {CommentsFindUniqueArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CommentsFindUniqueArgs<ExtArgs>>
    ): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Comments that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommentsFindUniqueOrThrowArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsFindFirstArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentsFindFirstArgs<ExtArgs>>
    ): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Comments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsFindFirstOrThrowArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comments.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comments.findMany({ take: 10 })
     * 
     * // Only select the `CommentId`
     * const commentsWithCommentIdOnly = await prisma.comments.findMany({ select: { CommentId: true } })
     * 
    **/
    findMany<T extends CommentsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Comments.
     * @param {CommentsCreateArgs} args - Arguments to create a Comments.
     * @example
     * // Create one Comments
     * const Comments = await prisma.comments.create({
     *   data: {
     *     // ... data to create a Comments
     *   }
     * })
     * 
    **/
    create<T extends CommentsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentsCreateArgs<ExtArgs>>
    ): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Comments.
     *     @param {CommentsCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comments = await prisma.comments.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommentsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comments.
     * @param {CommentsDeleteArgs} args - Arguments to delete one Comments.
     * @example
     * // Delete one Comments
     * const Comments = await prisma.comments.delete({
     *   where: {
     *     // ... filter to delete one Comments
     *   }
     * })
     * 
    **/
    delete<T extends CommentsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CommentsDeleteArgs<ExtArgs>>
    ): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Comments.
     * @param {CommentsUpdateArgs} args - Arguments to update one Comments.
     * @example
     * // Update one Comments
     * const comments = await prisma.comments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentsUpdateArgs<ExtArgs>>
    ): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentsDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comments = await prisma.comments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CommentsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comments.
     * @param {CommentsUpsertArgs} args - Arguments to update or create a Comments.
     * @example
     * // Update or create a Comments
     * const comments = await prisma.comments.upsert({
     *   create: {
     *     // ... data to create a Comments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comments we want to update
     *   }
     * })
    **/
    upsert<T extends CommentsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CommentsUpsertArgs<ExtArgs>>
    ): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comments.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentsCountArgs>(
      args?: Subset<T, CommentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentsAggregateArgs>(args: Subset<T, CommentsAggregateArgs>): Prisma.PrismaPromise<GetCommentsAggregateType<T>>

    /**
     * Group by Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentsGroupByArgs['orderBy'] }
        : { orderBy?: CommentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comments model
   */
  readonly fields: CommentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Cards<T extends Comments$CardsArgs<ExtArgs> = {}>(args?: Subset<T, Comments$CardsArgs<ExtArgs>>): Prisma__CardsClient<$Result.GetResult<Prisma.$CardsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Comments model
   */ 
  interface CommentsFieldRefs {
    readonly CommentId: FieldRef<"Comments", 'Int'>
    readonly CreatedAt: FieldRef<"Comments", 'DateTime'>
    readonly UpdatedAt: FieldRef<"Comments", 'DateTime'>
    readonly Comment: FieldRef<"Comments", 'String'>
    readonly CardId: FieldRef<"Comments", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Comments findUnique
   */
  export type CommentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where: CommentsWhereUniqueInput
  }

  /**
   * Comments findUniqueOrThrow
   */
  export type CommentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where: CommentsWhereUniqueInput
  }

  /**
   * Comments findFirst
   */
  export type CommentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * Comments findFirstOrThrow
   */
  export type CommentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * Comments findMany
   */
  export type CommentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * Comments create
   */
  export type CommentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * The data needed to create a Comments.
     */
    data?: XOR<CommentsCreateInput, CommentsUncheckedCreateInput>
  }

  /**
   * Comments createMany
   */
  export type CommentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentsCreateManyInput | CommentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comments update
   */
  export type CommentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * The data needed to update a Comments.
     */
    data: XOR<CommentsUpdateInput, CommentsUncheckedUpdateInput>
    /**
     * Choose, which Comments to update.
     */
    where: CommentsWhereUniqueInput
  }

  /**
   * Comments updateMany
   */
  export type CommentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentsUpdateManyMutationInput, CommentsUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentsWhereInput
  }

  /**
   * Comments upsert
   */
  export type CommentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * The filter to search for the Comments to update in case it exists.
     */
    where: CommentsWhereUniqueInput
    /**
     * In case the Comments found by the `where` argument doesn't exist, create a new Comments with this data.
     */
    create: XOR<CommentsCreateInput, CommentsUncheckedCreateInput>
    /**
     * In case the Comments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentsUpdateInput, CommentsUncheckedUpdateInput>
  }

  /**
   * Comments delete
   */
  export type CommentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter which Comments to delete.
     */
    where: CommentsWhereUniqueInput
  }

  /**
   * Comments deleteMany
   */
  export type CommentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentsWhereInput
  }

  /**
   * Comments.Cards
   */
  export type Comments$CardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cards
     */
    select?: CardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardsInclude<ExtArgs> | null
    where?: CardsWhereInput
  }

  /**
   * Comments without action
   */
  export type CommentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
  }


  /**
   * Model ListCards
   */

  export type AggregateListCards = {
    _count: ListCardsCountAggregateOutputType | null
    _avg: ListCardsAvgAggregateOutputType | null
    _sum: ListCardsSumAggregateOutputType | null
    _min: ListCardsMinAggregateOutputType | null
    _max: ListCardsMaxAggregateOutputType | null
  }

  export type ListCardsAvgAggregateOutputType = {
    ListId: number | null
    CardId: number | null
  }

  export type ListCardsSumAggregateOutputType = {
    ListId: number | null
    CardId: number | null
  }

  export type ListCardsMinAggregateOutputType = {
    ListId: number | null
    CardId: number | null
  }

  export type ListCardsMaxAggregateOutputType = {
    ListId: number | null
    CardId: number | null
  }

  export type ListCardsCountAggregateOutputType = {
    ListId: number
    CardId: number
    _all: number
  }


  export type ListCardsAvgAggregateInputType = {
    ListId?: true
    CardId?: true
  }

  export type ListCardsSumAggregateInputType = {
    ListId?: true
    CardId?: true
  }

  export type ListCardsMinAggregateInputType = {
    ListId?: true
    CardId?: true
  }

  export type ListCardsMaxAggregateInputType = {
    ListId?: true
    CardId?: true
  }

  export type ListCardsCountAggregateInputType = {
    ListId?: true
    CardId?: true
    _all?: true
  }

  export type ListCardsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ListCards to aggregate.
     */
    where?: ListCardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ListCards to fetch.
     */
    orderBy?: ListCardsOrderByWithRelationInput | ListCardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ListCardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ListCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ListCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ListCards
    **/
    _count?: true | ListCardsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ListCardsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ListCardsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ListCardsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ListCardsMaxAggregateInputType
  }

  export type GetListCardsAggregateType<T extends ListCardsAggregateArgs> = {
        [P in keyof T & keyof AggregateListCards]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateListCards[P]>
      : GetScalarType<T[P], AggregateListCards[P]>
  }




  export type ListCardsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ListCardsWhereInput
    orderBy?: ListCardsOrderByWithAggregationInput | ListCardsOrderByWithAggregationInput[]
    by: ListCardsScalarFieldEnum[] | ListCardsScalarFieldEnum
    having?: ListCardsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ListCardsCountAggregateInputType | true
    _avg?: ListCardsAvgAggregateInputType
    _sum?: ListCardsSumAggregateInputType
    _min?: ListCardsMinAggregateInputType
    _max?: ListCardsMaxAggregateInputType
  }

  export type ListCardsGroupByOutputType = {
    ListId: number
    CardId: number
    _count: ListCardsCountAggregateOutputType | null
    _avg: ListCardsAvgAggregateOutputType | null
    _sum: ListCardsSumAggregateOutputType | null
    _min: ListCardsMinAggregateOutputType | null
    _max: ListCardsMaxAggregateOutputType | null
  }

  type GetListCardsGroupByPayload<T extends ListCardsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ListCardsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ListCardsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ListCardsGroupByOutputType[P]>
            : GetScalarType<T[P], ListCardsGroupByOutputType[P]>
        }
      >
    >


  export type ListCardsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ListId?: boolean
    CardId?: boolean
    Cards?: boolean | CardsDefaultArgs<ExtArgs>
    Lists?: boolean | ListsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["listCards"]>

  export type ListCardsSelectScalar = {
    ListId?: boolean
    CardId?: boolean
  }


  export type ListCardsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Cards?: boolean | CardsDefaultArgs<ExtArgs>
    Lists?: boolean | ListsDefaultArgs<ExtArgs>
  }


  export type $ListCardsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ListCards"
    objects: {
      Cards: Prisma.$CardsPayload<ExtArgs>
      Lists: Prisma.$ListsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      ListId: number
      CardId: number
    }, ExtArgs["result"]["listCards"]>
    composites: {}
  }


  type ListCardsGetPayload<S extends boolean | null | undefined | ListCardsDefaultArgs> = $Result.GetResult<Prisma.$ListCardsPayload, S>

  type ListCardsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ListCardsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ListCardsCountAggregateInputType | true
    }

  export interface ListCardsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ListCards'], meta: { name: 'ListCards' } }
    /**
     * Find zero or one ListCards that matches the filter.
     * @param {ListCardsFindUniqueArgs} args - Arguments to find a ListCards
     * @example
     * // Get one ListCards
     * const listCards = await prisma.listCards.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ListCardsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ListCardsFindUniqueArgs<ExtArgs>>
    ): Prisma__ListCardsClient<$Result.GetResult<Prisma.$ListCardsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ListCards that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ListCardsFindUniqueOrThrowArgs} args - Arguments to find a ListCards
     * @example
     * // Get one ListCards
     * const listCards = await prisma.listCards.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ListCardsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ListCardsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ListCardsClient<$Result.GetResult<Prisma.$ListCardsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ListCards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListCardsFindFirstArgs} args - Arguments to find a ListCards
     * @example
     * // Get one ListCards
     * const listCards = await prisma.listCards.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ListCardsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ListCardsFindFirstArgs<ExtArgs>>
    ): Prisma__ListCardsClient<$Result.GetResult<Prisma.$ListCardsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ListCards that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListCardsFindFirstOrThrowArgs} args - Arguments to find a ListCards
     * @example
     * // Get one ListCards
     * const listCards = await prisma.listCards.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ListCardsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ListCardsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ListCardsClient<$Result.GetResult<Prisma.$ListCardsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ListCards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListCardsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ListCards
     * const listCards = await prisma.listCards.findMany()
     * 
     * // Get first 10 ListCards
     * const listCards = await prisma.listCards.findMany({ take: 10 })
     * 
     * // Only select the `ListId`
     * const listCardsWithListIdOnly = await prisma.listCards.findMany({ select: { ListId: true } })
     * 
    **/
    findMany<T extends ListCardsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ListCardsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListCardsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ListCards.
     * @param {ListCardsCreateArgs} args - Arguments to create a ListCards.
     * @example
     * // Create one ListCards
     * const ListCards = await prisma.listCards.create({
     *   data: {
     *     // ... data to create a ListCards
     *   }
     * })
     * 
    **/
    create<T extends ListCardsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ListCardsCreateArgs<ExtArgs>>
    ): Prisma__ListCardsClient<$Result.GetResult<Prisma.$ListCardsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ListCards.
     *     @param {ListCardsCreateManyArgs} args - Arguments to create many ListCards.
     *     @example
     *     // Create many ListCards
     *     const listCards = await prisma.listCards.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ListCardsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ListCardsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ListCards.
     * @param {ListCardsDeleteArgs} args - Arguments to delete one ListCards.
     * @example
     * // Delete one ListCards
     * const ListCards = await prisma.listCards.delete({
     *   where: {
     *     // ... filter to delete one ListCards
     *   }
     * })
     * 
    **/
    delete<T extends ListCardsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ListCardsDeleteArgs<ExtArgs>>
    ): Prisma__ListCardsClient<$Result.GetResult<Prisma.$ListCardsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ListCards.
     * @param {ListCardsUpdateArgs} args - Arguments to update one ListCards.
     * @example
     * // Update one ListCards
     * const listCards = await prisma.listCards.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ListCardsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ListCardsUpdateArgs<ExtArgs>>
    ): Prisma__ListCardsClient<$Result.GetResult<Prisma.$ListCardsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ListCards.
     * @param {ListCardsDeleteManyArgs} args - Arguments to filter ListCards to delete.
     * @example
     * // Delete a few ListCards
     * const { count } = await prisma.listCards.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ListCardsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ListCardsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ListCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListCardsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ListCards
     * const listCards = await prisma.listCards.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ListCardsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ListCardsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ListCards.
     * @param {ListCardsUpsertArgs} args - Arguments to update or create a ListCards.
     * @example
     * // Update or create a ListCards
     * const listCards = await prisma.listCards.upsert({
     *   create: {
     *     // ... data to create a ListCards
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ListCards we want to update
     *   }
     * })
    **/
    upsert<T extends ListCardsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ListCardsUpsertArgs<ExtArgs>>
    ): Prisma__ListCardsClient<$Result.GetResult<Prisma.$ListCardsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ListCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListCardsCountArgs} args - Arguments to filter ListCards to count.
     * @example
     * // Count the number of ListCards
     * const count = await prisma.listCards.count({
     *   where: {
     *     // ... the filter for the ListCards we want to count
     *   }
     * })
    **/
    count<T extends ListCardsCountArgs>(
      args?: Subset<T, ListCardsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ListCardsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ListCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListCardsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ListCardsAggregateArgs>(args: Subset<T, ListCardsAggregateArgs>): Prisma.PrismaPromise<GetListCardsAggregateType<T>>

    /**
     * Group by ListCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListCardsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ListCardsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ListCardsGroupByArgs['orderBy'] }
        : { orderBy?: ListCardsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ListCardsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetListCardsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ListCards model
   */
  readonly fields: ListCardsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ListCards.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ListCardsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Cards<T extends CardsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CardsDefaultArgs<ExtArgs>>): Prisma__CardsClient<$Result.GetResult<Prisma.$CardsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Lists<T extends ListsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ListsDefaultArgs<ExtArgs>>): Prisma__ListsClient<$Result.GetResult<Prisma.$ListsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ListCards model
   */ 
  interface ListCardsFieldRefs {
    readonly ListId: FieldRef<"ListCards", 'Int'>
    readonly CardId: FieldRef<"ListCards", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ListCards findUnique
   */
  export type ListCardsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListCards
     */
    select?: ListCardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListCardsInclude<ExtArgs> | null
    /**
     * Filter, which ListCards to fetch.
     */
    where: ListCardsWhereUniqueInput
  }

  /**
   * ListCards findUniqueOrThrow
   */
  export type ListCardsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListCards
     */
    select?: ListCardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListCardsInclude<ExtArgs> | null
    /**
     * Filter, which ListCards to fetch.
     */
    where: ListCardsWhereUniqueInput
  }

  /**
   * ListCards findFirst
   */
  export type ListCardsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListCards
     */
    select?: ListCardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListCardsInclude<ExtArgs> | null
    /**
     * Filter, which ListCards to fetch.
     */
    where?: ListCardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ListCards to fetch.
     */
    orderBy?: ListCardsOrderByWithRelationInput | ListCardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ListCards.
     */
    cursor?: ListCardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ListCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ListCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ListCards.
     */
    distinct?: ListCardsScalarFieldEnum | ListCardsScalarFieldEnum[]
  }

  /**
   * ListCards findFirstOrThrow
   */
  export type ListCardsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListCards
     */
    select?: ListCardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListCardsInclude<ExtArgs> | null
    /**
     * Filter, which ListCards to fetch.
     */
    where?: ListCardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ListCards to fetch.
     */
    orderBy?: ListCardsOrderByWithRelationInput | ListCardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ListCards.
     */
    cursor?: ListCardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ListCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ListCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ListCards.
     */
    distinct?: ListCardsScalarFieldEnum | ListCardsScalarFieldEnum[]
  }

  /**
   * ListCards findMany
   */
  export type ListCardsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListCards
     */
    select?: ListCardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListCardsInclude<ExtArgs> | null
    /**
     * Filter, which ListCards to fetch.
     */
    where?: ListCardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ListCards to fetch.
     */
    orderBy?: ListCardsOrderByWithRelationInput | ListCardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ListCards.
     */
    cursor?: ListCardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ListCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ListCards.
     */
    skip?: number
    distinct?: ListCardsScalarFieldEnum | ListCardsScalarFieldEnum[]
  }

  /**
   * ListCards create
   */
  export type ListCardsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListCards
     */
    select?: ListCardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListCardsInclude<ExtArgs> | null
    /**
     * The data needed to create a ListCards.
     */
    data: XOR<ListCardsCreateInput, ListCardsUncheckedCreateInput>
  }

  /**
   * ListCards createMany
   */
  export type ListCardsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ListCards.
     */
    data: ListCardsCreateManyInput | ListCardsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ListCards update
   */
  export type ListCardsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListCards
     */
    select?: ListCardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListCardsInclude<ExtArgs> | null
    /**
     * The data needed to update a ListCards.
     */
    data: XOR<ListCardsUpdateInput, ListCardsUncheckedUpdateInput>
    /**
     * Choose, which ListCards to update.
     */
    where: ListCardsWhereUniqueInput
  }

  /**
   * ListCards updateMany
   */
  export type ListCardsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ListCards.
     */
    data: XOR<ListCardsUpdateManyMutationInput, ListCardsUncheckedUpdateManyInput>
    /**
     * Filter which ListCards to update
     */
    where?: ListCardsWhereInput
  }

  /**
   * ListCards upsert
   */
  export type ListCardsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListCards
     */
    select?: ListCardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListCardsInclude<ExtArgs> | null
    /**
     * The filter to search for the ListCards to update in case it exists.
     */
    where: ListCardsWhereUniqueInput
    /**
     * In case the ListCards found by the `where` argument doesn't exist, create a new ListCards with this data.
     */
    create: XOR<ListCardsCreateInput, ListCardsUncheckedCreateInput>
    /**
     * In case the ListCards was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ListCardsUpdateInput, ListCardsUncheckedUpdateInput>
  }

  /**
   * ListCards delete
   */
  export type ListCardsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListCards
     */
    select?: ListCardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListCardsInclude<ExtArgs> | null
    /**
     * Filter which ListCards to delete.
     */
    where: ListCardsWhereUniqueInput
  }

  /**
   * ListCards deleteMany
   */
  export type ListCardsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ListCards to delete
     */
    where?: ListCardsWhereInput
  }

  /**
   * ListCards without action
   */
  export type ListCardsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListCards
     */
    select?: ListCardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListCardsInclude<ExtArgs> | null
  }


  /**
   * Model Lists
   */

  export type AggregateLists = {
    _count: ListsCountAggregateOutputType | null
    _avg: ListsAvgAggregateOutputType | null
    _sum: ListsSumAggregateOutputType | null
    _min: ListsMinAggregateOutputType | null
    _max: ListsMaxAggregateOutputType | null
  }

  export type ListsAvgAggregateOutputType = {
    ListId: number | null
  }

  export type ListsSumAggregateOutputType = {
    ListId: number | null
  }

  export type ListsMinAggregateOutputType = {
    ListId: number | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
    Title: string | null
  }

  export type ListsMaxAggregateOutputType = {
    ListId: number | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
    Title: string | null
  }

  export type ListsCountAggregateOutputType = {
    ListId: number
    CreatedAt: number
    UpdatedAt: number
    Title: number
    _all: number
  }


  export type ListsAvgAggregateInputType = {
    ListId?: true
  }

  export type ListsSumAggregateInputType = {
    ListId?: true
  }

  export type ListsMinAggregateInputType = {
    ListId?: true
    CreatedAt?: true
    UpdatedAt?: true
    Title?: true
  }

  export type ListsMaxAggregateInputType = {
    ListId?: true
    CreatedAt?: true
    UpdatedAt?: true
    Title?: true
  }

  export type ListsCountAggregateInputType = {
    ListId?: true
    CreatedAt?: true
    UpdatedAt?: true
    Title?: true
    _all?: true
  }

  export type ListsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lists to aggregate.
     */
    where?: ListsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lists to fetch.
     */
    orderBy?: ListsOrderByWithRelationInput | ListsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ListsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lists
    **/
    _count?: true | ListsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ListsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ListsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ListsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ListsMaxAggregateInputType
  }

  export type GetListsAggregateType<T extends ListsAggregateArgs> = {
        [P in keyof T & keyof AggregateLists]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLists[P]>
      : GetScalarType<T[P], AggregateLists[P]>
  }




  export type ListsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ListsWhereInput
    orderBy?: ListsOrderByWithAggregationInput | ListsOrderByWithAggregationInput[]
    by: ListsScalarFieldEnum[] | ListsScalarFieldEnum
    having?: ListsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ListsCountAggregateInputType | true
    _avg?: ListsAvgAggregateInputType
    _sum?: ListsSumAggregateInputType
    _min?: ListsMinAggregateInputType
    _max?: ListsMaxAggregateInputType
  }

  export type ListsGroupByOutputType = {
    ListId: number
    CreatedAt: Date
    UpdatedAt: Date | null
    Title: string | null
    _count: ListsCountAggregateOutputType | null
    _avg: ListsAvgAggregateOutputType | null
    _sum: ListsSumAggregateOutputType | null
    _min: ListsMinAggregateOutputType | null
    _max: ListsMaxAggregateOutputType | null
  }

  type GetListsGroupByPayload<T extends ListsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ListsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ListsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ListsGroupByOutputType[P]>
            : GetScalarType<T[P], ListsGroupByOutputType[P]>
        }
      >
    >


  export type ListsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ListId?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    Title?: boolean
    BoardLists?: boolean | Lists$BoardListsArgs<ExtArgs>
    ListCards?: boolean | Lists$ListCardsArgs<ExtArgs>
    _count?: boolean | ListsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lists"]>

  export type ListsSelectScalar = {
    ListId?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    Title?: boolean
  }


  export type ListsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BoardLists?: boolean | Lists$BoardListsArgs<ExtArgs>
    ListCards?: boolean | Lists$ListCardsArgs<ExtArgs>
    _count?: boolean | ListsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ListsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lists"
    objects: {
      BoardLists: Prisma.$BoardListsPayload<ExtArgs>[]
      ListCards: Prisma.$ListCardsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      ListId: number
      CreatedAt: Date
      UpdatedAt: Date | null
      Title: string | null
    }, ExtArgs["result"]["lists"]>
    composites: {}
  }


  type ListsGetPayload<S extends boolean | null | undefined | ListsDefaultArgs> = $Result.GetResult<Prisma.$ListsPayload, S>

  type ListsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ListsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ListsCountAggregateInputType | true
    }

  export interface ListsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lists'], meta: { name: 'Lists' } }
    /**
     * Find zero or one Lists that matches the filter.
     * @param {ListsFindUniqueArgs} args - Arguments to find a Lists
     * @example
     * // Get one Lists
     * const lists = await prisma.lists.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ListsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ListsFindUniqueArgs<ExtArgs>>
    ): Prisma__ListsClient<$Result.GetResult<Prisma.$ListsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Lists that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ListsFindUniqueOrThrowArgs} args - Arguments to find a Lists
     * @example
     * // Get one Lists
     * const lists = await prisma.lists.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ListsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ListsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ListsClient<$Result.GetResult<Prisma.$ListsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Lists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListsFindFirstArgs} args - Arguments to find a Lists
     * @example
     * // Get one Lists
     * const lists = await prisma.lists.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ListsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ListsFindFirstArgs<ExtArgs>>
    ): Prisma__ListsClient<$Result.GetResult<Prisma.$ListsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Lists that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListsFindFirstOrThrowArgs} args - Arguments to find a Lists
     * @example
     * // Get one Lists
     * const lists = await prisma.lists.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ListsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ListsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ListsClient<$Result.GetResult<Prisma.$ListsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Lists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lists
     * const lists = await prisma.lists.findMany()
     * 
     * // Get first 10 Lists
     * const lists = await prisma.lists.findMany({ take: 10 })
     * 
     * // Only select the `ListId`
     * const listsWithListIdOnly = await prisma.lists.findMany({ select: { ListId: true } })
     * 
    **/
    findMany<T extends ListsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ListsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Lists.
     * @param {ListsCreateArgs} args - Arguments to create a Lists.
     * @example
     * // Create one Lists
     * const Lists = await prisma.lists.create({
     *   data: {
     *     // ... data to create a Lists
     *   }
     * })
     * 
    **/
    create<T extends ListsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ListsCreateArgs<ExtArgs>>
    ): Prisma__ListsClient<$Result.GetResult<Prisma.$ListsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Lists.
     *     @param {ListsCreateManyArgs} args - Arguments to create many Lists.
     *     @example
     *     // Create many Lists
     *     const lists = await prisma.lists.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ListsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ListsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Lists.
     * @param {ListsDeleteArgs} args - Arguments to delete one Lists.
     * @example
     * // Delete one Lists
     * const Lists = await prisma.lists.delete({
     *   where: {
     *     // ... filter to delete one Lists
     *   }
     * })
     * 
    **/
    delete<T extends ListsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ListsDeleteArgs<ExtArgs>>
    ): Prisma__ListsClient<$Result.GetResult<Prisma.$ListsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Lists.
     * @param {ListsUpdateArgs} args - Arguments to update one Lists.
     * @example
     * // Update one Lists
     * const lists = await prisma.lists.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ListsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ListsUpdateArgs<ExtArgs>>
    ): Prisma__ListsClient<$Result.GetResult<Prisma.$ListsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Lists.
     * @param {ListsDeleteManyArgs} args - Arguments to filter Lists to delete.
     * @example
     * // Delete a few Lists
     * const { count } = await prisma.lists.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ListsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ListsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lists
     * const lists = await prisma.lists.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ListsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ListsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Lists.
     * @param {ListsUpsertArgs} args - Arguments to update or create a Lists.
     * @example
     * // Update or create a Lists
     * const lists = await prisma.lists.upsert({
     *   create: {
     *     // ... data to create a Lists
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lists we want to update
     *   }
     * })
    **/
    upsert<T extends ListsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ListsUpsertArgs<ExtArgs>>
    ): Prisma__ListsClient<$Result.GetResult<Prisma.$ListsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListsCountArgs} args - Arguments to filter Lists to count.
     * @example
     * // Count the number of Lists
     * const count = await prisma.lists.count({
     *   where: {
     *     // ... the filter for the Lists we want to count
     *   }
     * })
    **/
    count<T extends ListsCountArgs>(
      args?: Subset<T, ListsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ListsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ListsAggregateArgs>(args: Subset<T, ListsAggregateArgs>): Prisma.PrismaPromise<GetListsAggregateType<T>>

    /**
     * Group by Lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ListsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ListsGroupByArgs['orderBy'] }
        : { orderBy?: ListsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ListsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetListsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lists model
   */
  readonly fields: ListsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lists.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ListsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    BoardLists<T extends Lists$BoardListsArgs<ExtArgs> = {}>(args?: Subset<T, Lists$BoardListsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardListsPayload<ExtArgs>, T, 'findMany'> | Null>;

    ListCards<T extends Lists$ListCardsArgs<ExtArgs> = {}>(args?: Subset<T, Lists$ListCardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListCardsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Lists model
   */ 
  interface ListsFieldRefs {
    readonly ListId: FieldRef<"Lists", 'Int'>
    readonly CreatedAt: FieldRef<"Lists", 'DateTime'>
    readonly UpdatedAt: FieldRef<"Lists", 'DateTime'>
    readonly Title: FieldRef<"Lists", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Lists findUnique
   */
  export type ListsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lists
     */
    select?: ListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListsInclude<ExtArgs> | null
    /**
     * Filter, which Lists to fetch.
     */
    where: ListsWhereUniqueInput
  }

  /**
   * Lists findUniqueOrThrow
   */
  export type ListsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lists
     */
    select?: ListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListsInclude<ExtArgs> | null
    /**
     * Filter, which Lists to fetch.
     */
    where: ListsWhereUniqueInput
  }

  /**
   * Lists findFirst
   */
  export type ListsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lists
     */
    select?: ListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListsInclude<ExtArgs> | null
    /**
     * Filter, which Lists to fetch.
     */
    where?: ListsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lists to fetch.
     */
    orderBy?: ListsOrderByWithRelationInput | ListsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lists.
     */
    cursor?: ListsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lists.
     */
    distinct?: ListsScalarFieldEnum | ListsScalarFieldEnum[]
  }

  /**
   * Lists findFirstOrThrow
   */
  export type ListsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lists
     */
    select?: ListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListsInclude<ExtArgs> | null
    /**
     * Filter, which Lists to fetch.
     */
    where?: ListsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lists to fetch.
     */
    orderBy?: ListsOrderByWithRelationInput | ListsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lists.
     */
    cursor?: ListsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lists.
     */
    distinct?: ListsScalarFieldEnum | ListsScalarFieldEnum[]
  }

  /**
   * Lists findMany
   */
  export type ListsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lists
     */
    select?: ListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListsInclude<ExtArgs> | null
    /**
     * Filter, which Lists to fetch.
     */
    where?: ListsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lists to fetch.
     */
    orderBy?: ListsOrderByWithRelationInput | ListsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lists.
     */
    cursor?: ListsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lists.
     */
    skip?: number
    distinct?: ListsScalarFieldEnum | ListsScalarFieldEnum[]
  }

  /**
   * Lists create
   */
  export type ListsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lists
     */
    select?: ListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListsInclude<ExtArgs> | null
    /**
     * The data needed to create a Lists.
     */
    data?: XOR<ListsCreateInput, ListsUncheckedCreateInput>
  }

  /**
   * Lists createMany
   */
  export type ListsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lists.
     */
    data: ListsCreateManyInput | ListsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lists update
   */
  export type ListsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lists
     */
    select?: ListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListsInclude<ExtArgs> | null
    /**
     * The data needed to update a Lists.
     */
    data: XOR<ListsUpdateInput, ListsUncheckedUpdateInput>
    /**
     * Choose, which Lists to update.
     */
    where: ListsWhereUniqueInput
  }

  /**
   * Lists updateMany
   */
  export type ListsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lists.
     */
    data: XOR<ListsUpdateManyMutationInput, ListsUncheckedUpdateManyInput>
    /**
     * Filter which Lists to update
     */
    where?: ListsWhereInput
  }

  /**
   * Lists upsert
   */
  export type ListsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lists
     */
    select?: ListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListsInclude<ExtArgs> | null
    /**
     * The filter to search for the Lists to update in case it exists.
     */
    where: ListsWhereUniqueInput
    /**
     * In case the Lists found by the `where` argument doesn't exist, create a new Lists with this data.
     */
    create: XOR<ListsCreateInput, ListsUncheckedCreateInput>
    /**
     * In case the Lists was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ListsUpdateInput, ListsUncheckedUpdateInput>
  }

  /**
   * Lists delete
   */
  export type ListsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lists
     */
    select?: ListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListsInclude<ExtArgs> | null
    /**
     * Filter which Lists to delete.
     */
    where: ListsWhereUniqueInput
  }

  /**
   * Lists deleteMany
   */
  export type ListsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lists to delete
     */
    where?: ListsWhereInput
  }

  /**
   * Lists.BoardLists
   */
  export type Lists$BoardListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardLists
     */
    select?: BoardListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardListsInclude<ExtArgs> | null
    where?: BoardListsWhereInput
    orderBy?: BoardListsOrderByWithRelationInput | BoardListsOrderByWithRelationInput[]
    cursor?: BoardListsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BoardListsScalarFieldEnum | BoardListsScalarFieldEnum[]
  }

  /**
   * Lists.ListCards
   */
  export type Lists$ListCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListCards
     */
    select?: ListCardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListCardsInclude<ExtArgs> | null
    where?: ListCardsWhereInput
    orderBy?: ListCardsOrderByWithRelationInput | ListCardsOrderByWithRelationInput[]
    cursor?: ListCardsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ListCardsScalarFieldEnum | ListCardsScalarFieldEnum[]
  }

  /**
   * Lists without action
   */
  export type ListsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lists
     */
    select?: ListsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListsInclude<ExtArgs> | null
  }


  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    UserId: number | null
  }

  export type UsersSumAggregateOutputType = {
    UserId: number | null
  }

  export type UsersMinAggregateOutputType = {
    UserId: number | null
    FirstName: string | null
    LastName: string | null
    Email: string | null
    Password: string | null
    Username: string | null
  }

  export type UsersMaxAggregateOutputType = {
    UserId: number | null
    FirstName: string | null
    LastName: string | null
    Email: string | null
    Password: string | null
    Username: string | null
  }

  export type UsersCountAggregateOutputType = {
    UserId: number
    FirstName: number
    LastName: number
    Email: number
    Password: number
    Username: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    UserId?: true
  }

  export type UsersSumAggregateInputType = {
    UserId?: true
  }

  export type UsersMinAggregateInputType = {
    UserId?: true
    FirstName?: true
    LastName?: true
    Email?: true
    Password?: true
    Username?: true
  }

  export type UsersMaxAggregateInputType = {
    UserId?: true
    FirstName?: true
    LastName?: true
    Email?: true
    Password?: true
    Username?: true
  }

  export type UsersCountAggregateInputType = {
    UserId?: true
    FirstName?: true
    LastName?: true
    Email?: true
    Password?: true
    Username?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    UserId: number
    FirstName: string | null
    LastName: string | null
    Email: string | null
    Password: string | null
    Username: string | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UserId?: boolean
    FirstName?: boolean
    LastName?: boolean
    Email?: boolean
    Password?: boolean
    Username?: boolean
    BoardMembers?: boolean | Users$BoardMembersArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    UserId?: boolean
    FirstName?: boolean
    LastName?: boolean
    Email?: boolean
    Password?: boolean
    Username?: boolean
  }


  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BoardMembers?: boolean | Users$BoardMembersArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      BoardMembers: Prisma.$BoardMembersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      UserId: number
      FirstName: string | null
      LastName: string | null
      Email: string | null
      Password: string | null
      Username: string | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `UserId`
     * const usersWithUserIdOnly = await prisma.users.findMany({ select: { UserId: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersCreateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    BoardMembers<T extends Users$BoardMembersArgs<ExtArgs> = {}>(args?: Subset<T, Users$BoardMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardMembersPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly UserId: FieldRef<"Users", 'Int'>
    readonly FirstName: FieldRef<"Users", 'String'>
    readonly LastName: FieldRef<"Users", 'String'>
    readonly Email: FieldRef<"Users", 'String'>
    readonly Password: FieldRef<"Users", 'String'>
    readonly Username: FieldRef<"Users", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data?: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }

  /**
   * Users.BoardMembers
   */
  export type Users$BoardMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMembers
     */
    select?: BoardMembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMembersInclude<ExtArgs> | null
    where?: BoardMembersWhereInput
    orderBy?: BoardMembersOrderByWithRelationInput | BoardMembersOrderByWithRelationInput[]
    cursor?: BoardMembersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BoardMembersScalarFieldEnum | BoardMembersScalarFieldEnum[]
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BoardListsScalarFieldEnum: {
    BoardId: 'BoardId',
    ListId: 'ListId'
  };

  export type BoardListsScalarFieldEnum = (typeof BoardListsScalarFieldEnum)[keyof typeof BoardListsScalarFieldEnum]


  export const BoardMembersScalarFieldEnum: {
    BoardId: 'BoardId',
    MemberId: 'MemberId'
  };

  export type BoardMembersScalarFieldEnum = (typeof BoardMembersScalarFieldEnum)[keyof typeof BoardMembersScalarFieldEnum]


  export const BoardsScalarFieldEnum: {
    BoardId: 'BoardId',
    CreatedAt: 'CreatedAt',
    Title: 'Title',
    UpdatedAt: 'UpdatedAt'
  };

  export type BoardsScalarFieldEnum = (typeof BoardsScalarFieldEnum)[keyof typeof BoardsScalarFieldEnum]


  export const CardsScalarFieldEnum: {
    CardId: 'CardId',
    Title: 'Title',
    DueDate: 'DueDate',
    Description: 'Description',
    ReminderDate: 'ReminderDate'
  };

  export type CardsScalarFieldEnum = (typeof CardsScalarFieldEnum)[keyof typeof CardsScalarFieldEnum]


  export const CheckListsScalarFieldEnum: {
    CheckListId: 'CheckListId',
    IsChecked: 'IsChecked',
    Title: 'Title',
    CardId: 'CardId'
  };

  export type CheckListsScalarFieldEnum = (typeof CheckListsScalarFieldEnum)[keyof typeof CheckListsScalarFieldEnum]


  export const CommentsScalarFieldEnum: {
    CommentId: 'CommentId',
    CreatedAt: 'CreatedAt',
    UpdatedAt: 'UpdatedAt',
    Comment: 'Comment',
    CardId: 'CardId'
  };

  export type CommentsScalarFieldEnum = (typeof CommentsScalarFieldEnum)[keyof typeof CommentsScalarFieldEnum]


  export const ListCardsScalarFieldEnum: {
    ListId: 'ListId',
    CardId: 'CardId'
  };

  export type ListCardsScalarFieldEnum = (typeof ListCardsScalarFieldEnum)[keyof typeof ListCardsScalarFieldEnum]


  export const ListsScalarFieldEnum: {
    ListId: 'ListId',
    CreatedAt: 'CreatedAt',
    UpdatedAt: 'UpdatedAt',
    Title: 'Title'
  };

  export type ListsScalarFieldEnum = (typeof ListsScalarFieldEnum)[keyof typeof ListsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    UserId: 'UserId',
    FirstName: 'FirstName',
    LastName: 'LastName',
    Email: 'Email',
    Password: 'Password',
    Username: 'Username'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type BoardListsWhereInput = {
    AND?: BoardListsWhereInput | BoardListsWhereInput[]
    OR?: BoardListsWhereInput[]
    NOT?: BoardListsWhereInput | BoardListsWhereInput[]
    BoardId?: IntFilter<"BoardLists"> | number
    ListId?: IntFilter<"BoardLists"> | number
    Boards?: XOR<BoardsRelationFilter, BoardsWhereInput>
    Lists?: XOR<ListsRelationFilter, ListsWhereInput>
  }

  export type BoardListsOrderByWithRelationInput = {
    BoardId?: SortOrder
    ListId?: SortOrder
    Boards?: BoardsOrderByWithRelationInput
    Lists?: ListsOrderByWithRelationInput
  }

  export type BoardListsWhereUniqueInput = Prisma.AtLeast<{
    BoardId_ListId?: BoardListsBoardIdListIdCompoundUniqueInput
    AND?: BoardListsWhereInput | BoardListsWhereInput[]
    OR?: BoardListsWhereInput[]
    NOT?: BoardListsWhereInput | BoardListsWhereInput[]
    BoardId?: IntFilter<"BoardLists"> | number
    ListId?: IntFilter<"BoardLists"> | number
    Boards?: XOR<BoardsRelationFilter, BoardsWhereInput>
    Lists?: XOR<ListsRelationFilter, ListsWhereInput>
  }, "BoardId_ListId">

  export type BoardListsOrderByWithAggregationInput = {
    BoardId?: SortOrder
    ListId?: SortOrder
    _count?: BoardListsCountOrderByAggregateInput
    _avg?: BoardListsAvgOrderByAggregateInput
    _max?: BoardListsMaxOrderByAggregateInput
    _min?: BoardListsMinOrderByAggregateInput
    _sum?: BoardListsSumOrderByAggregateInput
  }

  export type BoardListsScalarWhereWithAggregatesInput = {
    AND?: BoardListsScalarWhereWithAggregatesInput | BoardListsScalarWhereWithAggregatesInput[]
    OR?: BoardListsScalarWhereWithAggregatesInput[]
    NOT?: BoardListsScalarWhereWithAggregatesInput | BoardListsScalarWhereWithAggregatesInput[]
    BoardId?: IntWithAggregatesFilter<"BoardLists"> | number
    ListId?: IntWithAggregatesFilter<"BoardLists"> | number
  }

  export type BoardMembersWhereInput = {
    AND?: BoardMembersWhereInput | BoardMembersWhereInput[]
    OR?: BoardMembersWhereInput[]
    NOT?: BoardMembersWhereInput | BoardMembersWhereInput[]
    BoardId?: IntFilter<"BoardMembers"> | number
    MemberId?: IntFilter<"BoardMembers"> | number
    Boards?: XOR<BoardsRelationFilter, BoardsWhereInput>
    Users?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type BoardMembersOrderByWithRelationInput = {
    BoardId?: SortOrder
    MemberId?: SortOrder
    Boards?: BoardsOrderByWithRelationInput
    Users?: UsersOrderByWithRelationInput
  }

  export type BoardMembersWhereUniqueInput = Prisma.AtLeast<{
    BoardId_MemberId?: BoardMembersBoardIdMemberIdCompoundUniqueInput
    AND?: BoardMembersWhereInput | BoardMembersWhereInput[]
    OR?: BoardMembersWhereInput[]
    NOT?: BoardMembersWhereInput | BoardMembersWhereInput[]
    BoardId?: IntFilter<"BoardMembers"> | number
    MemberId?: IntFilter<"BoardMembers"> | number
    Boards?: XOR<BoardsRelationFilter, BoardsWhereInput>
    Users?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "BoardId_MemberId">

  export type BoardMembersOrderByWithAggregationInput = {
    BoardId?: SortOrder
    MemberId?: SortOrder
    _count?: BoardMembersCountOrderByAggregateInput
    _avg?: BoardMembersAvgOrderByAggregateInput
    _max?: BoardMembersMaxOrderByAggregateInput
    _min?: BoardMembersMinOrderByAggregateInput
    _sum?: BoardMembersSumOrderByAggregateInput
  }

  export type BoardMembersScalarWhereWithAggregatesInput = {
    AND?: BoardMembersScalarWhereWithAggregatesInput | BoardMembersScalarWhereWithAggregatesInput[]
    OR?: BoardMembersScalarWhereWithAggregatesInput[]
    NOT?: BoardMembersScalarWhereWithAggregatesInput | BoardMembersScalarWhereWithAggregatesInput[]
    BoardId?: IntWithAggregatesFilter<"BoardMembers"> | number
    MemberId?: IntWithAggregatesFilter<"BoardMembers"> | number
  }

  export type BoardsWhereInput = {
    AND?: BoardsWhereInput | BoardsWhereInput[]
    OR?: BoardsWhereInput[]
    NOT?: BoardsWhereInput | BoardsWhereInput[]
    BoardId?: IntFilter<"Boards"> | number
    CreatedAt?: DateTimeFilter<"Boards"> | Date | string
    Title?: StringNullableFilter<"Boards"> | string | null
    UpdatedAt?: DateTimeNullableFilter<"Boards"> | Date | string | null
    BoardLists?: BoardListsListRelationFilter
    BoardMembers?: BoardMembersListRelationFilter
  }

  export type BoardsOrderByWithRelationInput = {
    BoardId?: SortOrder
    CreatedAt?: SortOrder
    Title?: SortOrderInput | SortOrder
    UpdatedAt?: SortOrderInput | SortOrder
    BoardLists?: BoardListsOrderByRelationAggregateInput
    BoardMembers?: BoardMembersOrderByRelationAggregateInput
  }

  export type BoardsWhereUniqueInput = Prisma.AtLeast<{
    BoardId?: number
    AND?: BoardsWhereInput | BoardsWhereInput[]
    OR?: BoardsWhereInput[]
    NOT?: BoardsWhereInput | BoardsWhereInput[]
    CreatedAt?: DateTimeFilter<"Boards"> | Date | string
    Title?: StringNullableFilter<"Boards"> | string | null
    UpdatedAt?: DateTimeNullableFilter<"Boards"> | Date | string | null
    BoardLists?: BoardListsListRelationFilter
    BoardMembers?: BoardMembersListRelationFilter
  }, "BoardId">

  export type BoardsOrderByWithAggregationInput = {
    BoardId?: SortOrder
    CreatedAt?: SortOrder
    Title?: SortOrderInput | SortOrder
    UpdatedAt?: SortOrderInput | SortOrder
    _count?: BoardsCountOrderByAggregateInput
    _avg?: BoardsAvgOrderByAggregateInput
    _max?: BoardsMaxOrderByAggregateInput
    _min?: BoardsMinOrderByAggregateInput
    _sum?: BoardsSumOrderByAggregateInput
  }

  export type BoardsScalarWhereWithAggregatesInput = {
    AND?: BoardsScalarWhereWithAggregatesInput | BoardsScalarWhereWithAggregatesInput[]
    OR?: BoardsScalarWhereWithAggregatesInput[]
    NOT?: BoardsScalarWhereWithAggregatesInput | BoardsScalarWhereWithAggregatesInput[]
    BoardId?: IntWithAggregatesFilter<"Boards"> | number
    CreatedAt?: DateTimeWithAggregatesFilter<"Boards"> | Date | string
    Title?: StringNullableWithAggregatesFilter<"Boards"> | string | null
    UpdatedAt?: DateTimeNullableWithAggregatesFilter<"Boards"> | Date | string | null
  }

  export type CardsWhereInput = {
    AND?: CardsWhereInput | CardsWhereInput[]
    OR?: CardsWhereInput[]
    NOT?: CardsWhereInput | CardsWhereInput[]
    CardId?: IntFilter<"Cards"> | number
    Title?: StringNullableFilter<"Cards"> | string | null
    DueDate?: DateTimeNullableFilter<"Cards"> | Date | string | null
    Description?: StringNullableFilter<"Cards"> | string | null
    ReminderDate?: DateTimeNullableFilter<"Cards"> | Date | string | null
    CheckLists?: CheckListsListRelationFilter
    Comments?: CommentsListRelationFilter
    ListCards?: ListCardsListRelationFilter
  }

  export type CardsOrderByWithRelationInput = {
    CardId?: SortOrder
    Title?: SortOrderInput | SortOrder
    DueDate?: SortOrderInput | SortOrder
    Description?: SortOrderInput | SortOrder
    ReminderDate?: SortOrderInput | SortOrder
    CheckLists?: CheckListsOrderByRelationAggregateInput
    Comments?: CommentsOrderByRelationAggregateInput
    ListCards?: ListCardsOrderByRelationAggregateInput
  }

  export type CardsWhereUniqueInput = Prisma.AtLeast<{
    CardId?: number
    AND?: CardsWhereInput | CardsWhereInput[]
    OR?: CardsWhereInput[]
    NOT?: CardsWhereInput | CardsWhereInput[]
    Title?: StringNullableFilter<"Cards"> | string | null
    DueDate?: DateTimeNullableFilter<"Cards"> | Date | string | null
    Description?: StringNullableFilter<"Cards"> | string | null
    ReminderDate?: DateTimeNullableFilter<"Cards"> | Date | string | null
    CheckLists?: CheckListsListRelationFilter
    Comments?: CommentsListRelationFilter
    ListCards?: ListCardsListRelationFilter
  }, "CardId">

  export type CardsOrderByWithAggregationInput = {
    CardId?: SortOrder
    Title?: SortOrderInput | SortOrder
    DueDate?: SortOrderInput | SortOrder
    Description?: SortOrderInput | SortOrder
    ReminderDate?: SortOrderInput | SortOrder
    _count?: CardsCountOrderByAggregateInput
    _avg?: CardsAvgOrderByAggregateInput
    _max?: CardsMaxOrderByAggregateInput
    _min?: CardsMinOrderByAggregateInput
    _sum?: CardsSumOrderByAggregateInput
  }

  export type CardsScalarWhereWithAggregatesInput = {
    AND?: CardsScalarWhereWithAggregatesInput | CardsScalarWhereWithAggregatesInput[]
    OR?: CardsScalarWhereWithAggregatesInput[]
    NOT?: CardsScalarWhereWithAggregatesInput | CardsScalarWhereWithAggregatesInput[]
    CardId?: IntWithAggregatesFilter<"Cards"> | number
    Title?: StringNullableWithAggregatesFilter<"Cards"> | string | null
    DueDate?: DateTimeNullableWithAggregatesFilter<"Cards"> | Date | string | null
    Description?: StringNullableWithAggregatesFilter<"Cards"> | string | null
    ReminderDate?: DateTimeNullableWithAggregatesFilter<"Cards"> | Date | string | null
  }

  export type CheckListsWhereInput = {
    AND?: CheckListsWhereInput | CheckListsWhereInput[]
    OR?: CheckListsWhereInput[]
    NOT?: CheckListsWhereInput | CheckListsWhereInput[]
    CheckListId?: IntFilter<"CheckLists"> | number
    IsChecked?: BoolNullableFilter<"CheckLists"> | boolean | null
    Title?: StringNullableFilter<"CheckLists"> | string | null
    CardId?: IntNullableFilter<"CheckLists"> | number | null
    Cards?: XOR<CardsNullableRelationFilter, CardsWhereInput> | null
  }

  export type CheckListsOrderByWithRelationInput = {
    CheckListId?: SortOrder
    IsChecked?: SortOrderInput | SortOrder
    Title?: SortOrderInput | SortOrder
    CardId?: SortOrderInput | SortOrder
    Cards?: CardsOrderByWithRelationInput
  }

  export type CheckListsWhereUniqueInput = Prisma.AtLeast<{
    CheckListId?: number
    AND?: CheckListsWhereInput | CheckListsWhereInput[]
    OR?: CheckListsWhereInput[]
    NOT?: CheckListsWhereInput | CheckListsWhereInput[]
    IsChecked?: BoolNullableFilter<"CheckLists"> | boolean | null
    Title?: StringNullableFilter<"CheckLists"> | string | null
    CardId?: IntNullableFilter<"CheckLists"> | number | null
    Cards?: XOR<CardsNullableRelationFilter, CardsWhereInput> | null
  }, "CheckListId">

  export type CheckListsOrderByWithAggregationInput = {
    CheckListId?: SortOrder
    IsChecked?: SortOrderInput | SortOrder
    Title?: SortOrderInput | SortOrder
    CardId?: SortOrderInput | SortOrder
    _count?: CheckListsCountOrderByAggregateInput
    _avg?: CheckListsAvgOrderByAggregateInput
    _max?: CheckListsMaxOrderByAggregateInput
    _min?: CheckListsMinOrderByAggregateInput
    _sum?: CheckListsSumOrderByAggregateInput
  }

  export type CheckListsScalarWhereWithAggregatesInput = {
    AND?: CheckListsScalarWhereWithAggregatesInput | CheckListsScalarWhereWithAggregatesInput[]
    OR?: CheckListsScalarWhereWithAggregatesInput[]
    NOT?: CheckListsScalarWhereWithAggregatesInput | CheckListsScalarWhereWithAggregatesInput[]
    CheckListId?: IntWithAggregatesFilter<"CheckLists"> | number
    IsChecked?: BoolNullableWithAggregatesFilter<"CheckLists"> | boolean | null
    Title?: StringNullableWithAggregatesFilter<"CheckLists"> | string | null
    CardId?: IntNullableWithAggregatesFilter<"CheckLists"> | number | null
  }

  export type CommentsWhereInput = {
    AND?: CommentsWhereInput | CommentsWhereInput[]
    OR?: CommentsWhereInput[]
    NOT?: CommentsWhereInput | CommentsWhereInput[]
    CommentId?: IntFilter<"Comments"> | number
    CreatedAt?: DateTimeFilter<"Comments"> | Date | string
    UpdatedAt?: DateTimeNullableFilter<"Comments"> | Date | string | null
    Comment?: StringNullableFilter<"Comments"> | string | null
    CardId?: IntNullableFilter<"Comments"> | number | null
    Cards?: XOR<CardsNullableRelationFilter, CardsWhereInput> | null
  }

  export type CommentsOrderByWithRelationInput = {
    CommentId?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrderInput | SortOrder
    Comment?: SortOrderInput | SortOrder
    CardId?: SortOrderInput | SortOrder
    Cards?: CardsOrderByWithRelationInput
  }

  export type CommentsWhereUniqueInput = Prisma.AtLeast<{
    CommentId?: number
    AND?: CommentsWhereInput | CommentsWhereInput[]
    OR?: CommentsWhereInput[]
    NOT?: CommentsWhereInput | CommentsWhereInput[]
    CreatedAt?: DateTimeFilter<"Comments"> | Date | string
    UpdatedAt?: DateTimeNullableFilter<"Comments"> | Date | string | null
    Comment?: StringNullableFilter<"Comments"> | string | null
    CardId?: IntNullableFilter<"Comments"> | number | null
    Cards?: XOR<CardsNullableRelationFilter, CardsWhereInput> | null
  }, "CommentId">

  export type CommentsOrderByWithAggregationInput = {
    CommentId?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrderInput | SortOrder
    Comment?: SortOrderInput | SortOrder
    CardId?: SortOrderInput | SortOrder
    _count?: CommentsCountOrderByAggregateInput
    _avg?: CommentsAvgOrderByAggregateInput
    _max?: CommentsMaxOrderByAggregateInput
    _min?: CommentsMinOrderByAggregateInput
    _sum?: CommentsSumOrderByAggregateInput
  }

  export type CommentsScalarWhereWithAggregatesInput = {
    AND?: CommentsScalarWhereWithAggregatesInput | CommentsScalarWhereWithAggregatesInput[]
    OR?: CommentsScalarWhereWithAggregatesInput[]
    NOT?: CommentsScalarWhereWithAggregatesInput | CommentsScalarWhereWithAggregatesInput[]
    CommentId?: IntWithAggregatesFilter<"Comments"> | number
    CreatedAt?: DateTimeWithAggregatesFilter<"Comments"> | Date | string
    UpdatedAt?: DateTimeNullableWithAggregatesFilter<"Comments"> | Date | string | null
    Comment?: StringNullableWithAggregatesFilter<"Comments"> | string | null
    CardId?: IntNullableWithAggregatesFilter<"Comments"> | number | null
  }

  export type ListCardsWhereInput = {
    AND?: ListCardsWhereInput | ListCardsWhereInput[]
    OR?: ListCardsWhereInput[]
    NOT?: ListCardsWhereInput | ListCardsWhereInput[]
    ListId?: IntFilter<"ListCards"> | number
    CardId?: IntFilter<"ListCards"> | number
    Cards?: XOR<CardsRelationFilter, CardsWhereInput>
    Lists?: XOR<ListsRelationFilter, ListsWhereInput>
  }

  export type ListCardsOrderByWithRelationInput = {
    ListId?: SortOrder
    CardId?: SortOrder
    Cards?: CardsOrderByWithRelationInput
    Lists?: ListsOrderByWithRelationInput
  }

  export type ListCardsWhereUniqueInput = Prisma.AtLeast<{
    ListId_CardId?: ListCardsListIdCardIdCompoundUniqueInput
    AND?: ListCardsWhereInput | ListCardsWhereInput[]
    OR?: ListCardsWhereInput[]
    NOT?: ListCardsWhereInput | ListCardsWhereInput[]
    ListId?: IntFilter<"ListCards"> | number
    CardId?: IntFilter<"ListCards"> | number
    Cards?: XOR<CardsRelationFilter, CardsWhereInput>
    Lists?: XOR<ListsRelationFilter, ListsWhereInput>
  }, "ListId_CardId">

  export type ListCardsOrderByWithAggregationInput = {
    ListId?: SortOrder
    CardId?: SortOrder
    _count?: ListCardsCountOrderByAggregateInput
    _avg?: ListCardsAvgOrderByAggregateInput
    _max?: ListCardsMaxOrderByAggregateInput
    _min?: ListCardsMinOrderByAggregateInput
    _sum?: ListCardsSumOrderByAggregateInput
  }

  export type ListCardsScalarWhereWithAggregatesInput = {
    AND?: ListCardsScalarWhereWithAggregatesInput | ListCardsScalarWhereWithAggregatesInput[]
    OR?: ListCardsScalarWhereWithAggregatesInput[]
    NOT?: ListCardsScalarWhereWithAggregatesInput | ListCardsScalarWhereWithAggregatesInput[]
    ListId?: IntWithAggregatesFilter<"ListCards"> | number
    CardId?: IntWithAggregatesFilter<"ListCards"> | number
  }

  export type ListsWhereInput = {
    AND?: ListsWhereInput | ListsWhereInput[]
    OR?: ListsWhereInput[]
    NOT?: ListsWhereInput | ListsWhereInput[]
    ListId?: IntFilter<"Lists"> | number
    CreatedAt?: DateTimeFilter<"Lists"> | Date | string
    UpdatedAt?: DateTimeNullableFilter<"Lists"> | Date | string | null
    Title?: StringNullableFilter<"Lists"> | string | null
    BoardLists?: BoardListsListRelationFilter
    ListCards?: ListCardsListRelationFilter
  }

  export type ListsOrderByWithRelationInput = {
    ListId?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrderInput | SortOrder
    Title?: SortOrderInput | SortOrder
    BoardLists?: BoardListsOrderByRelationAggregateInput
    ListCards?: ListCardsOrderByRelationAggregateInput
  }

  export type ListsWhereUniqueInput = Prisma.AtLeast<{
    ListId?: number
    AND?: ListsWhereInput | ListsWhereInput[]
    OR?: ListsWhereInput[]
    NOT?: ListsWhereInput | ListsWhereInput[]
    CreatedAt?: DateTimeFilter<"Lists"> | Date | string
    UpdatedAt?: DateTimeNullableFilter<"Lists"> | Date | string | null
    Title?: StringNullableFilter<"Lists"> | string | null
    BoardLists?: BoardListsListRelationFilter
    ListCards?: ListCardsListRelationFilter
  }, "ListId">

  export type ListsOrderByWithAggregationInput = {
    ListId?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrderInput | SortOrder
    Title?: SortOrderInput | SortOrder
    _count?: ListsCountOrderByAggregateInput
    _avg?: ListsAvgOrderByAggregateInput
    _max?: ListsMaxOrderByAggregateInput
    _min?: ListsMinOrderByAggregateInput
    _sum?: ListsSumOrderByAggregateInput
  }

  export type ListsScalarWhereWithAggregatesInput = {
    AND?: ListsScalarWhereWithAggregatesInput | ListsScalarWhereWithAggregatesInput[]
    OR?: ListsScalarWhereWithAggregatesInput[]
    NOT?: ListsScalarWhereWithAggregatesInput | ListsScalarWhereWithAggregatesInput[]
    ListId?: IntWithAggregatesFilter<"Lists"> | number
    CreatedAt?: DateTimeWithAggregatesFilter<"Lists"> | Date | string
    UpdatedAt?: DateTimeNullableWithAggregatesFilter<"Lists"> | Date | string | null
    Title?: StringNullableWithAggregatesFilter<"Lists"> | string | null
  }

  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    UserId?: IntFilter<"Users"> | number
    FirstName?: StringNullableFilter<"Users"> | string | null
    LastName?: StringNullableFilter<"Users"> | string | null
    Email?: StringNullableFilter<"Users"> | string | null
    Password?: StringNullableFilter<"Users"> | string | null
    Username?: StringNullableFilter<"Users"> | string | null
    BoardMembers?: BoardMembersListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    UserId?: SortOrder
    FirstName?: SortOrderInput | SortOrder
    LastName?: SortOrderInput | SortOrder
    Email?: SortOrderInput | SortOrder
    Password?: SortOrderInput | SortOrder
    Username?: SortOrderInput | SortOrder
    BoardMembers?: BoardMembersOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    UserId?: number
    Email?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    FirstName?: StringNullableFilter<"Users"> | string | null
    LastName?: StringNullableFilter<"Users"> | string | null
    Password?: StringNullableFilter<"Users"> | string | null
    Username?: StringNullableFilter<"Users"> | string | null
    BoardMembers?: BoardMembersListRelationFilter
  }, "UserId" | "Email">

  export type UsersOrderByWithAggregationInput = {
    UserId?: SortOrder
    FirstName?: SortOrderInput | SortOrder
    LastName?: SortOrderInput | SortOrder
    Email?: SortOrderInput | SortOrder
    Password?: SortOrderInput | SortOrder
    Username?: SortOrderInput | SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    UserId?: IntWithAggregatesFilter<"Users"> | number
    FirstName?: StringNullableWithAggregatesFilter<"Users"> | string | null
    LastName?: StringNullableWithAggregatesFilter<"Users"> | string | null
    Email?: StringNullableWithAggregatesFilter<"Users"> | string | null
    Password?: StringNullableWithAggregatesFilter<"Users"> | string | null
    Username?: StringNullableWithAggregatesFilter<"Users"> | string | null
  }

  export type BoardListsCreateInput = {
    Boards: BoardsCreateNestedOneWithoutBoardListsInput
    Lists: ListsCreateNestedOneWithoutBoardListsInput
  }

  export type BoardListsUncheckedCreateInput = {
    BoardId: number
    ListId: number
  }

  export type BoardListsUpdateInput = {
    Boards?: BoardsUpdateOneRequiredWithoutBoardListsNestedInput
    Lists?: ListsUpdateOneRequiredWithoutBoardListsNestedInput
  }

  export type BoardListsUncheckedUpdateInput = {
    BoardId?: IntFieldUpdateOperationsInput | number
    ListId?: IntFieldUpdateOperationsInput | number
  }

  export type BoardListsCreateManyInput = {
    BoardId: number
    ListId: number
  }

  export type BoardListsUpdateManyMutationInput = {

  }

  export type BoardListsUncheckedUpdateManyInput = {
    BoardId?: IntFieldUpdateOperationsInput | number
    ListId?: IntFieldUpdateOperationsInput | number
  }

  export type BoardMembersCreateInput = {
    Boards: BoardsCreateNestedOneWithoutBoardMembersInput
    Users: UsersCreateNestedOneWithoutBoardMembersInput
  }

  export type BoardMembersUncheckedCreateInput = {
    BoardId: number
    MemberId: number
  }

  export type BoardMembersUpdateInput = {
    Boards?: BoardsUpdateOneRequiredWithoutBoardMembersNestedInput
    Users?: UsersUpdateOneRequiredWithoutBoardMembersNestedInput
  }

  export type BoardMembersUncheckedUpdateInput = {
    BoardId?: IntFieldUpdateOperationsInput | number
    MemberId?: IntFieldUpdateOperationsInput | number
  }

  export type BoardMembersCreateManyInput = {
    BoardId: number
    MemberId: number
  }

  export type BoardMembersUpdateManyMutationInput = {

  }

  export type BoardMembersUncheckedUpdateManyInput = {
    BoardId?: IntFieldUpdateOperationsInput | number
    MemberId?: IntFieldUpdateOperationsInput | number
  }

  export type BoardsCreateInput = {
    CreatedAt?: Date | string
    Title?: string | null
    UpdatedAt?: Date | string | null
    BoardLists?: BoardListsCreateNestedManyWithoutBoardsInput
    BoardMembers?: BoardMembersCreateNestedManyWithoutBoardsInput
  }

  export type BoardsUncheckedCreateInput = {
    BoardId?: number
    CreatedAt?: Date | string
    Title?: string | null
    UpdatedAt?: Date | string | null
    BoardLists?: BoardListsUncheckedCreateNestedManyWithoutBoardsInput
    BoardMembers?: BoardMembersUncheckedCreateNestedManyWithoutBoardsInput
  }

  export type BoardsUpdateInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    BoardLists?: BoardListsUpdateManyWithoutBoardsNestedInput
    BoardMembers?: BoardMembersUpdateManyWithoutBoardsNestedInput
  }

  export type BoardsUncheckedUpdateInput = {
    BoardId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    BoardLists?: BoardListsUncheckedUpdateManyWithoutBoardsNestedInput
    BoardMembers?: BoardMembersUncheckedUpdateManyWithoutBoardsNestedInput
  }

  export type BoardsCreateManyInput = {
    BoardId?: number
    CreatedAt?: Date | string
    Title?: string | null
    UpdatedAt?: Date | string | null
  }

  export type BoardsUpdateManyMutationInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BoardsUncheckedUpdateManyInput = {
    BoardId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CardsCreateInput = {
    Title?: string | null
    DueDate?: Date | string | null
    Description?: string | null
    ReminderDate?: Date | string | null
    CheckLists?: CheckListsCreateNestedManyWithoutCardsInput
    Comments?: CommentsCreateNestedManyWithoutCardsInput
    ListCards?: ListCardsCreateNestedManyWithoutCardsInput
  }

  export type CardsUncheckedCreateInput = {
    CardId?: number
    Title?: string | null
    DueDate?: Date | string | null
    Description?: string | null
    ReminderDate?: Date | string | null
    CheckLists?: CheckListsUncheckedCreateNestedManyWithoutCardsInput
    Comments?: CommentsUncheckedCreateNestedManyWithoutCardsInput
    ListCards?: ListCardsUncheckedCreateNestedManyWithoutCardsInput
  }

  export type CardsUpdateInput = {
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    DueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    ReminderDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    CheckLists?: CheckListsUpdateManyWithoutCardsNestedInput
    Comments?: CommentsUpdateManyWithoutCardsNestedInput
    ListCards?: ListCardsUpdateManyWithoutCardsNestedInput
  }

  export type CardsUncheckedUpdateInput = {
    CardId?: IntFieldUpdateOperationsInput | number
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    DueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    ReminderDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    CheckLists?: CheckListsUncheckedUpdateManyWithoutCardsNestedInput
    Comments?: CommentsUncheckedUpdateManyWithoutCardsNestedInput
    ListCards?: ListCardsUncheckedUpdateManyWithoutCardsNestedInput
  }

  export type CardsCreateManyInput = {
    CardId?: number
    Title?: string | null
    DueDate?: Date | string | null
    Description?: string | null
    ReminderDate?: Date | string | null
  }

  export type CardsUpdateManyMutationInput = {
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    DueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    ReminderDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CardsUncheckedUpdateManyInput = {
    CardId?: IntFieldUpdateOperationsInput | number
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    DueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    ReminderDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CheckListsCreateInput = {
    IsChecked?: boolean | null
    Title?: string | null
    Cards?: CardsCreateNestedOneWithoutCheckListsInput
  }

  export type CheckListsUncheckedCreateInput = {
    CheckListId?: number
    IsChecked?: boolean | null
    Title?: string | null
    CardId?: number | null
  }

  export type CheckListsUpdateInput = {
    IsChecked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    Cards?: CardsUpdateOneWithoutCheckListsNestedInput
  }

  export type CheckListsUncheckedUpdateInput = {
    CheckListId?: IntFieldUpdateOperationsInput | number
    IsChecked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    CardId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CheckListsCreateManyInput = {
    CheckListId?: number
    IsChecked?: boolean | null
    Title?: string | null
    CardId?: number | null
  }

  export type CheckListsUpdateManyMutationInput = {
    IsChecked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CheckListsUncheckedUpdateManyInput = {
    CheckListId?: IntFieldUpdateOperationsInput | number
    IsChecked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    CardId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CommentsCreateInput = {
    CreatedAt?: Date | string
    UpdatedAt?: Date | string | null
    Comment?: string | null
    Cards?: CardsCreateNestedOneWithoutCommentsInput
  }

  export type CommentsUncheckedCreateInput = {
    CommentId?: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string | null
    Comment?: string | null
    CardId?: number | null
  }

  export type CommentsUpdateInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Comment?: NullableStringFieldUpdateOperationsInput | string | null
    Cards?: CardsUpdateOneWithoutCommentsNestedInput
  }

  export type CommentsUncheckedUpdateInput = {
    CommentId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Comment?: NullableStringFieldUpdateOperationsInput | string | null
    CardId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CommentsCreateManyInput = {
    CommentId?: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string | null
    Comment?: string | null
    CardId?: number | null
  }

  export type CommentsUpdateManyMutationInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Comment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentsUncheckedUpdateManyInput = {
    CommentId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Comment?: NullableStringFieldUpdateOperationsInput | string | null
    CardId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ListCardsCreateInput = {
    Cards: CardsCreateNestedOneWithoutListCardsInput
    Lists: ListsCreateNestedOneWithoutListCardsInput
  }

  export type ListCardsUncheckedCreateInput = {
    ListId: number
    CardId: number
  }

  export type ListCardsUpdateInput = {
    Cards?: CardsUpdateOneRequiredWithoutListCardsNestedInput
    Lists?: ListsUpdateOneRequiredWithoutListCardsNestedInput
  }

  export type ListCardsUncheckedUpdateInput = {
    ListId?: IntFieldUpdateOperationsInput | number
    CardId?: IntFieldUpdateOperationsInput | number
  }

  export type ListCardsCreateManyInput = {
    ListId: number
    CardId: number
  }

  export type ListCardsUpdateManyMutationInput = {

  }

  export type ListCardsUncheckedUpdateManyInput = {
    ListId?: IntFieldUpdateOperationsInput | number
    CardId?: IntFieldUpdateOperationsInput | number
  }

  export type ListsCreateInput = {
    CreatedAt?: Date | string
    UpdatedAt?: Date | string | null
    Title?: string | null
    BoardLists?: BoardListsCreateNestedManyWithoutListsInput
    ListCards?: ListCardsCreateNestedManyWithoutListsInput
  }

  export type ListsUncheckedCreateInput = {
    ListId?: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string | null
    Title?: string | null
    BoardLists?: BoardListsUncheckedCreateNestedManyWithoutListsInput
    ListCards?: ListCardsUncheckedCreateNestedManyWithoutListsInput
  }

  export type ListsUpdateInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    BoardLists?: BoardListsUpdateManyWithoutListsNestedInput
    ListCards?: ListCardsUpdateManyWithoutListsNestedInput
  }

  export type ListsUncheckedUpdateInput = {
    ListId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    BoardLists?: BoardListsUncheckedUpdateManyWithoutListsNestedInput
    ListCards?: ListCardsUncheckedUpdateManyWithoutListsNestedInput
  }

  export type ListsCreateManyInput = {
    ListId?: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string | null
    Title?: string | null
  }

  export type ListsUpdateManyMutationInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ListsUncheckedUpdateManyInput = {
    ListId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsersCreateInput = {
    FirstName?: string | null
    LastName?: string | null
    Email?: string | null
    Password?: string | null
    Username?: string | null
    BoardMembers?: BoardMembersCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateInput = {
    UserId?: number
    FirstName?: string | null
    LastName?: string | null
    Email?: string | null
    Password?: string | null
    Username?: string | null
    BoardMembers?: BoardMembersUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersUpdateInput = {
    FirstName?: NullableStringFieldUpdateOperationsInput | string | null
    LastName?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Password?: NullableStringFieldUpdateOperationsInput | string | null
    Username?: NullableStringFieldUpdateOperationsInput | string | null
    BoardMembers?: BoardMembersUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    FirstName?: NullableStringFieldUpdateOperationsInput | string | null
    LastName?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Password?: NullableStringFieldUpdateOperationsInput | string | null
    Username?: NullableStringFieldUpdateOperationsInput | string | null
    BoardMembers?: BoardMembersUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UsersCreateManyInput = {
    UserId?: number
    FirstName?: string | null
    LastName?: string | null
    Email?: string | null
    Password?: string | null
    Username?: string | null
  }

  export type UsersUpdateManyMutationInput = {
    FirstName?: NullableStringFieldUpdateOperationsInput | string | null
    LastName?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Password?: NullableStringFieldUpdateOperationsInput | string | null
    Username?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsersUncheckedUpdateManyInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    FirstName?: NullableStringFieldUpdateOperationsInput | string | null
    LastName?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Password?: NullableStringFieldUpdateOperationsInput | string | null
    Username?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoardsRelationFilter = {
    is?: BoardsWhereInput
    isNot?: BoardsWhereInput
  }

  export type ListsRelationFilter = {
    is?: ListsWhereInput
    isNot?: ListsWhereInput
  }

  export type BoardListsBoardIdListIdCompoundUniqueInput = {
    BoardId: number
    ListId: number
  }

  export type BoardListsCountOrderByAggregateInput = {
    BoardId?: SortOrder
    ListId?: SortOrder
  }

  export type BoardListsAvgOrderByAggregateInput = {
    BoardId?: SortOrder
    ListId?: SortOrder
  }

  export type BoardListsMaxOrderByAggregateInput = {
    BoardId?: SortOrder
    ListId?: SortOrder
  }

  export type BoardListsMinOrderByAggregateInput = {
    BoardId?: SortOrder
    ListId?: SortOrder
  }

  export type BoardListsSumOrderByAggregateInput = {
    BoardId?: SortOrder
    ListId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type BoardMembersBoardIdMemberIdCompoundUniqueInput = {
    BoardId: number
    MemberId: number
  }

  export type BoardMembersCountOrderByAggregateInput = {
    BoardId?: SortOrder
    MemberId?: SortOrder
  }

  export type BoardMembersAvgOrderByAggregateInput = {
    BoardId?: SortOrder
    MemberId?: SortOrder
  }

  export type BoardMembersMaxOrderByAggregateInput = {
    BoardId?: SortOrder
    MemberId?: SortOrder
  }

  export type BoardMembersMinOrderByAggregateInput = {
    BoardId?: SortOrder
    MemberId?: SortOrder
  }

  export type BoardMembersSumOrderByAggregateInput = {
    BoardId?: SortOrder
    MemberId?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoardListsListRelationFilter = {
    every?: BoardListsWhereInput
    some?: BoardListsWhereInput
    none?: BoardListsWhereInput
  }

  export type BoardMembersListRelationFilter = {
    every?: BoardMembersWhereInput
    some?: BoardMembersWhereInput
    none?: BoardMembersWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BoardListsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BoardMembersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BoardsCountOrderByAggregateInput = {
    BoardId?: SortOrder
    CreatedAt?: SortOrder
    Title?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type BoardsAvgOrderByAggregateInput = {
    BoardId?: SortOrder
  }

  export type BoardsMaxOrderByAggregateInput = {
    BoardId?: SortOrder
    CreatedAt?: SortOrder
    Title?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type BoardsMinOrderByAggregateInput = {
    BoardId?: SortOrder
    CreatedAt?: SortOrder
    Title?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type BoardsSumOrderByAggregateInput = {
    BoardId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type CheckListsListRelationFilter = {
    every?: CheckListsWhereInput
    some?: CheckListsWhereInput
    none?: CheckListsWhereInput
  }

  export type CommentsListRelationFilter = {
    every?: CommentsWhereInput
    some?: CommentsWhereInput
    none?: CommentsWhereInput
  }

  export type ListCardsListRelationFilter = {
    every?: ListCardsWhereInput
    some?: ListCardsWhereInput
    none?: ListCardsWhereInput
  }

  export type CheckListsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ListCardsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CardsCountOrderByAggregateInput = {
    CardId?: SortOrder
    Title?: SortOrder
    DueDate?: SortOrder
    Description?: SortOrder
    ReminderDate?: SortOrder
  }

  export type CardsAvgOrderByAggregateInput = {
    CardId?: SortOrder
  }

  export type CardsMaxOrderByAggregateInput = {
    CardId?: SortOrder
    Title?: SortOrder
    DueDate?: SortOrder
    Description?: SortOrder
    ReminderDate?: SortOrder
  }

  export type CardsMinOrderByAggregateInput = {
    CardId?: SortOrder
    Title?: SortOrder
    DueDate?: SortOrder
    Description?: SortOrder
    ReminderDate?: SortOrder
  }

  export type CardsSumOrderByAggregateInput = {
    CardId?: SortOrder
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CardsNullableRelationFilter = {
    is?: CardsWhereInput | null
    isNot?: CardsWhereInput | null
  }

  export type CheckListsCountOrderByAggregateInput = {
    CheckListId?: SortOrder
    IsChecked?: SortOrder
    Title?: SortOrder
    CardId?: SortOrder
  }

  export type CheckListsAvgOrderByAggregateInput = {
    CheckListId?: SortOrder
    CardId?: SortOrder
  }

  export type CheckListsMaxOrderByAggregateInput = {
    CheckListId?: SortOrder
    IsChecked?: SortOrder
    Title?: SortOrder
    CardId?: SortOrder
  }

  export type CheckListsMinOrderByAggregateInput = {
    CheckListId?: SortOrder
    IsChecked?: SortOrder
    Title?: SortOrder
    CardId?: SortOrder
  }

  export type CheckListsSumOrderByAggregateInput = {
    CheckListId?: SortOrder
    CardId?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type CommentsCountOrderByAggregateInput = {
    CommentId?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    Comment?: SortOrder
    CardId?: SortOrder
  }

  export type CommentsAvgOrderByAggregateInput = {
    CommentId?: SortOrder
    CardId?: SortOrder
  }

  export type CommentsMaxOrderByAggregateInput = {
    CommentId?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    Comment?: SortOrder
    CardId?: SortOrder
  }

  export type CommentsMinOrderByAggregateInput = {
    CommentId?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    Comment?: SortOrder
    CardId?: SortOrder
  }

  export type CommentsSumOrderByAggregateInput = {
    CommentId?: SortOrder
    CardId?: SortOrder
  }

  export type CardsRelationFilter = {
    is?: CardsWhereInput
    isNot?: CardsWhereInput
  }

  export type ListCardsListIdCardIdCompoundUniqueInput = {
    ListId: number
    CardId: number
  }

  export type ListCardsCountOrderByAggregateInput = {
    ListId?: SortOrder
    CardId?: SortOrder
  }

  export type ListCardsAvgOrderByAggregateInput = {
    ListId?: SortOrder
    CardId?: SortOrder
  }

  export type ListCardsMaxOrderByAggregateInput = {
    ListId?: SortOrder
    CardId?: SortOrder
  }

  export type ListCardsMinOrderByAggregateInput = {
    ListId?: SortOrder
    CardId?: SortOrder
  }

  export type ListCardsSumOrderByAggregateInput = {
    ListId?: SortOrder
    CardId?: SortOrder
  }

  export type ListsCountOrderByAggregateInput = {
    ListId?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    Title?: SortOrder
  }

  export type ListsAvgOrderByAggregateInput = {
    ListId?: SortOrder
  }

  export type ListsMaxOrderByAggregateInput = {
    ListId?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    Title?: SortOrder
  }

  export type ListsMinOrderByAggregateInput = {
    ListId?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    Title?: SortOrder
  }

  export type ListsSumOrderByAggregateInput = {
    ListId?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    UserId?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    Username?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    UserId?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    UserId?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    Username?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    UserId?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    Username?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    UserId?: SortOrder
  }

  export type BoardsCreateNestedOneWithoutBoardListsInput = {
    create?: XOR<BoardsCreateWithoutBoardListsInput, BoardsUncheckedCreateWithoutBoardListsInput>
    connectOrCreate?: BoardsCreateOrConnectWithoutBoardListsInput
    connect?: BoardsWhereUniqueInput
  }

  export type ListsCreateNestedOneWithoutBoardListsInput = {
    create?: XOR<ListsCreateWithoutBoardListsInput, ListsUncheckedCreateWithoutBoardListsInput>
    connectOrCreate?: ListsCreateOrConnectWithoutBoardListsInput
    connect?: ListsWhereUniqueInput
  }

  export type BoardsUpdateOneRequiredWithoutBoardListsNestedInput = {
    create?: XOR<BoardsCreateWithoutBoardListsInput, BoardsUncheckedCreateWithoutBoardListsInput>
    connectOrCreate?: BoardsCreateOrConnectWithoutBoardListsInput
    upsert?: BoardsUpsertWithoutBoardListsInput
    connect?: BoardsWhereUniqueInput
    update?: XOR<XOR<BoardsUpdateToOneWithWhereWithoutBoardListsInput, BoardsUpdateWithoutBoardListsInput>, BoardsUncheckedUpdateWithoutBoardListsInput>
  }

  export type ListsUpdateOneRequiredWithoutBoardListsNestedInput = {
    create?: XOR<ListsCreateWithoutBoardListsInput, ListsUncheckedCreateWithoutBoardListsInput>
    connectOrCreate?: ListsCreateOrConnectWithoutBoardListsInput
    upsert?: ListsUpsertWithoutBoardListsInput
    connect?: ListsWhereUniqueInput
    update?: XOR<XOR<ListsUpdateToOneWithWhereWithoutBoardListsInput, ListsUpdateWithoutBoardListsInput>, ListsUncheckedUpdateWithoutBoardListsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoardsCreateNestedOneWithoutBoardMembersInput = {
    create?: XOR<BoardsCreateWithoutBoardMembersInput, BoardsUncheckedCreateWithoutBoardMembersInput>
    connectOrCreate?: BoardsCreateOrConnectWithoutBoardMembersInput
    connect?: BoardsWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutBoardMembersInput = {
    create?: XOR<UsersCreateWithoutBoardMembersInput, UsersUncheckedCreateWithoutBoardMembersInput>
    connectOrCreate?: UsersCreateOrConnectWithoutBoardMembersInput
    connect?: UsersWhereUniqueInput
  }

  export type BoardsUpdateOneRequiredWithoutBoardMembersNestedInput = {
    create?: XOR<BoardsCreateWithoutBoardMembersInput, BoardsUncheckedCreateWithoutBoardMembersInput>
    connectOrCreate?: BoardsCreateOrConnectWithoutBoardMembersInput
    upsert?: BoardsUpsertWithoutBoardMembersInput
    connect?: BoardsWhereUniqueInput
    update?: XOR<XOR<BoardsUpdateToOneWithWhereWithoutBoardMembersInput, BoardsUpdateWithoutBoardMembersInput>, BoardsUncheckedUpdateWithoutBoardMembersInput>
  }

  export type UsersUpdateOneRequiredWithoutBoardMembersNestedInput = {
    create?: XOR<UsersCreateWithoutBoardMembersInput, UsersUncheckedCreateWithoutBoardMembersInput>
    connectOrCreate?: UsersCreateOrConnectWithoutBoardMembersInput
    upsert?: UsersUpsertWithoutBoardMembersInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutBoardMembersInput, UsersUpdateWithoutBoardMembersInput>, UsersUncheckedUpdateWithoutBoardMembersInput>
  }

  export type BoardListsCreateNestedManyWithoutBoardsInput = {
    create?: XOR<BoardListsCreateWithoutBoardsInput, BoardListsUncheckedCreateWithoutBoardsInput> | BoardListsCreateWithoutBoardsInput[] | BoardListsUncheckedCreateWithoutBoardsInput[]
    connectOrCreate?: BoardListsCreateOrConnectWithoutBoardsInput | BoardListsCreateOrConnectWithoutBoardsInput[]
    createMany?: BoardListsCreateManyBoardsInputEnvelope
    connect?: BoardListsWhereUniqueInput | BoardListsWhereUniqueInput[]
  }

  export type BoardMembersCreateNestedManyWithoutBoardsInput = {
    create?: XOR<BoardMembersCreateWithoutBoardsInput, BoardMembersUncheckedCreateWithoutBoardsInput> | BoardMembersCreateWithoutBoardsInput[] | BoardMembersUncheckedCreateWithoutBoardsInput[]
    connectOrCreate?: BoardMembersCreateOrConnectWithoutBoardsInput | BoardMembersCreateOrConnectWithoutBoardsInput[]
    createMany?: BoardMembersCreateManyBoardsInputEnvelope
    connect?: BoardMembersWhereUniqueInput | BoardMembersWhereUniqueInput[]
  }

  export type BoardListsUncheckedCreateNestedManyWithoutBoardsInput = {
    create?: XOR<BoardListsCreateWithoutBoardsInput, BoardListsUncheckedCreateWithoutBoardsInput> | BoardListsCreateWithoutBoardsInput[] | BoardListsUncheckedCreateWithoutBoardsInput[]
    connectOrCreate?: BoardListsCreateOrConnectWithoutBoardsInput | BoardListsCreateOrConnectWithoutBoardsInput[]
    createMany?: BoardListsCreateManyBoardsInputEnvelope
    connect?: BoardListsWhereUniqueInput | BoardListsWhereUniqueInput[]
  }

  export type BoardMembersUncheckedCreateNestedManyWithoutBoardsInput = {
    create?: XOR<BoardMembersCreateWithoutBoardsInput, BoardMembersUncheckedCreateWithoutBoardsInput> | BoardMembersCreateWithoutBoardsInput[] | BoardMembersUncheckedCreateWithoutBoardsInput[]
    connectOrCreate?: BoardMembersCreateOrConnectWithoutBoardsInput | BoardMembersCreateOrConnectWithoutBoardsInput[]
    createMany?: BoardMembersCreateManyBoardsInputEnvelope
    connect?: BoardMembersWhereUniqueInput | BoardMembersWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoardListsUpdateManyWithoutBoardsNestedInput = {
    create?: XOR<BoardListsCreateWithoutBoardsInput, BoardListsUncheckedCreateWithoutBoardsInput> | BoardListsCreateWithoutBoardsInput[] | BoardListsUncheckedCreateWithoutBoardsInput[]
    connectOrCreate?: BoardListsCreateOrConnectWithoutBoardsInput | BoardListsCreateOrConnectWithoutBoardsInput[]
    upsert?: BoardListsUpsertWithWhereUniqueWithoutBoardsInput | BoardListsUpsertWithWhereUniqueWithoutBoardsInput[]
    createMany?: BoardListsCreateManyBoardsInputEnvelope
    set?: BoardListsWhereUniqueInput | BoardListsWhereUniqueInput[]
    disconnect?: BoardListsWhereUniqueInput | BoardListsWhereUniqueInput[]
    delete?: BoardListsWhereUniqueInput | BoardListsWhereUniqueInput[]
    connect?: BoardListsWhereUniqueInput | BoardListsWhereUniqueInput[]
    update?: BoardListsUpdateWithWhereUniqueWithoutBoardsInput | BoardListsUpdateWithWhereUniqueWithoutBoardsInput[]
    updateMany?: BoardListsUpdateManyWithWhereWithoutBoardsInput | BoardListsUpdateManyWithWhereWithoutBoardsInput[]
    deleteMany?: BoardListsScalarWhereInput | BoardListsScalarWhereInput[]
  }

  export type BoardMembersUpdateManyWithoutBoardsNestedInput = {
    create?: XOR<BoardMembersCreateWithoutBoardsInput, BoardMembersUncheckedCreateWithoutBoardsInput> | BoardMembersCreateWithoutBoardsInput[] | BoardMembersUncheckedCreateWithoutBoardsInput[]
    connectOrCreate?: BoardMembersCreateOrConnectWithoutBoardsInput | BoardMembersCreateOrConnectWithoutBoardsInput[]
    upsert?: BoardMembersUpsertWithWhereUniqueWithoutBoardsInput | BoardMembersUpsertWithWhereUniqueWithoutBoardsInput[]
    createMany?: BoardMembersCreateManyBoardsInputEnvelope
    set?: BoardMembersWhereUniqueInput | BoardMembersWhereUniqueInput[]
    disconnect?: BoardMembersWhereUniqueInput | BoardMembersWhereUniqueInput[]
    delete?: BoardMembersWhereUniqueInput | BoardMembersWhereUniqueInput[]
    connect?: BoardMembersWhereUniqueInput | BoardMembersWhereUniqueInput[]
    update?: BoardMembersUpdateWithWhereUniqueWithoutBoardsInput | BoardMembersUpdateWithWhereUniqueWithoutBoardsInput[]
    updateMany?: BoardMembersUpdateManyWithWhereWithoutBoardsInput | BoardMembersUpdateManyWithWhereWithoutBoardsInput[]
    deleteMany?: BoardMembersScalarWhereInput | BoardMembersScalarWhereInput[]
  }

  export type BoardListsUncheckedUpdateManyWithoutBoardsNestedInput = {
    create?: XOR<BoardListsCreateWithoutBoardsInput, BoardListsUncheckedCreateWithoutBoardsInput> | BoardListsCreateWithoutBoardsInput[] | BoardListsUncheckedCreateWithoutBoardsInput[]
    connectOrCreate?: BoardListsCreateOrConnectWithoutBoardsInput | BoardListsCreateOrConnectWithoutBoardsInput[]
    upsert?: BoardListsUpsertWithWhereUniqueWithoutBoardsInput | BoardListsUpsertWithWhereUniqueWithoutBoardsInput[]
    createMany?: BoardListsCreateManyBoardsInputEnvelope
    set?: BoardListsWhereUniqueInput | BoardListsWhereUniqueInput[]
    disconnect?: BoardListsWhereUniqueInput | BoardListsWhereUniqueInput[]
    delete?: BoardListsWhereUniqueInput | BoardListsWhereUniqueInput[]
    connect?: BoardListsWhereUniqueInput | BoardListsWhereUniqueInput[]
    update?: BoardListsUpdateWithWhereUniqueWithoutBoardsInput | BoardListsUpdateWithWhereUniqueWithoutBoardsInput[]
    updateMany?: BoardListsUpdateManyWithWhereWithoutBoardsInput | BoardListsUpdateManyWithWhereWithoutBoardsInput[]
    deleteMany?: BoardListsScalarWhereInput | BoardListsScalarWhereInput[]
  }

  export type BoardMembersUncheckedUpdateManyWithoutBoardsNestedInput = {
    create?: XOR<BoardMembersCreateWithoutBoardsInput, BoardMembersUncheckedCreateWithoutBoardsInput> | BoardMembersCreateWithoutBoardsInput[] | BoardMembersUncheckedCreateWithoutBoardsInput[]
    connectOrCreate?: BoardMembersCreateOrConnectWithoutBoardsInput | BoardMembersCreateOrConnectWithoutBoardsInput[]
    upsert?: BoardMembersUpsertWithWhereUniqueWithoutBoardsInput | BoardMembersUpsertWithWhereUniqueWithoutBoardsInput[]
    createMany?: BoardMembersCreateManyBoardsInputEnvelope
    set?: BoardMembersWhereUniqueInput | BoardMembersWhereUniqueInput[]
    disconnect?: BoardMembersWhereUniqueInput | BoardMembersWhereUniqueInput[]
    delete?: BoardMembersWhereUniqueInput | BoardMembersWhereUniqueInput[]
    connect?: BoardMembersWhereUniqueInput | BoardMembersWhereUniqueInput[]
    update?: BoardMembersUpdateWithWhereUniqueWithoutBoardsInput | BoardMembersUpdateWithWhereUniqueWithoutBoardsInput[]
    updateMany?: BoardMembersUpdateManyWithWhereWithoutBoardsInput | BoardMembersUpdateManyWithWhereWithoutBoardsInput[]
    deleteMany?: BoardMembersScalarWhereInput | BoardMembersScalarWhereInput[]
  }

  export type CheckListsCreateNestedManyWithoutCardsInput = {
    create?: XOR<CheckListsCreateWithoutCardsInput, CheckListsUncheckedCreateWithoutCardsInput> | CheckListsCreateWithoutCardsInput[] | CheckListsUncheckedCreateWithoutCardsInput[]
    connectOrCreate?: CheckListsCreateOrConnectWithoutCardsInput | CheckListsCreateOrConnectWithoutCardsInput[]
    createMany?: CheckListsCreateManyCardsInputEnvelope
    connect?: CheckListsWhereUniqueInput | CheckListsWhereUniqueInput[]
  }

  export type CommentsCreateNestedManyWithoutCardsInput = {
    create?: XOR<CommentsCreateWithoutCardsInput, CommentsUncheckedCreateWithoutCardsInput> | CommentsCreateWithoutCardsInput[] | CommentsUncheckedCreateWithoutCardsInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutCardsInput | CommentsCreateOrConnectWithoutCardsInput[]
    createMany?: CommentsCreateManyCardsInputEnvelope
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
  }

  export type ListCardsCreateNestedManyWithoutCardsInput = {
    create?: XOR<ListCardsCreateWithoutCardsInput, ListCardsUncheckedCreateWithoutCardsInput> | ListCardsCreateWithoutCardsInput[] | ListCardsUncheckedCreateWithoutCardsInput[]
    connectOrCreate?: ListCardsCreateOrConnectWithoutCardsInput | ListCardsCreateOrConnectWithoutCardsInput[]
    createMany?: ListCardsCreateManyCardsInputEnvelope
    connect?: ListCardsWhereUniqueInput | ListCardsWhereUniqueInput[]
  }

  export type CheckListsUncheckedCreateNestedManyWithoutCardsInput = {
    create?: XOR<CheckListsCreateWithoutCardsInput, CheckListsUncheckedCreateWithoutCardsInput> | CheckListsCreateWithoutCardsInput[] | CheckListsUncheckedCreateWithoutCardsInput[]
    connectOrCreate?: CheckListsCreateOrConnectWithoutCardsInput | CheckListsCreateOrConnectWithoutCardsInput[]
    createMany?: CheckListsCreateManyCardsInputEnvelope
    connect?: CheckListsWhereUniqueInput | CheckListsWhereUniqueInput[]
  }

  export type CommentsUncheckedCreateNestedManyWithoutCardsInput = {
    create?: XOR<CommentsCreateWithoutCardsInput, CommentsUncheckedCreateWithoutCardsInput> | CommentsCreateWithoutCardsInput[] | CommentsUncheckedCreateWithoutCardsInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutCardsInput | CommentsCreateOrConnectWithoutCardsInput[]
    createMany?: CommentsCreateManyCardsInputEnvelope
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
  }

  export type ListCardsUncheckedCreateNestedManyWithoutCardsInput = {
    create?: XOR<ListCardsCreateWithoutCardsInput, ListCardsUncheckedCreateWithoutCardsInput> | ListCardsCreateWithoutCardsInput[] | ListCardsUncheckedCreateWithoutCardsInput[]
    connectOrCreate?: ListCardsCreateOrConnectWithoutCardsInput | ListCardsCreateOrConnectWithoutCardsInput[]
    createMany?: ListCardsCreateManyCardsInputEnvelope
    connect?: ListCardsWhereUniqueInput | ListCardsWhereUniqueInput[]
  }

  export type CheckListsUpdateManyWithoutCardsNestedInput = {
    create?: XOR<CheckListsCreateWithoutCardsInput, CheckListsUncheckedCreateWithoutCardsInput> | CheckListsCreateWithoutCardsInput[] | CheckListsUncheckedCreateWithoutCardsInput[]
    connectOrCreate?: CheckListsCreateOrConnectWithoutCardsInput | CheckListsCreateOrConnectWithoutCardsInput[]
    upsert?: CheckListsUpsertWithWhereUniqueWithoutCardsInput | CheckListsUpsertWithWhereUniqueWithoutCardsInput[]
    createMany?: CheckListsCreateManyCardsInputEnvelope
    set?: CheckListsWhereUniqueInput | CheckListsWhereUniqueInput[]
    disconnect?: CheckListsWhereUniqueInput | CheckListsWhereUniqueInput[]
    delete?: CheckListsWhereUniqueInput | CheckListsWhereUniqueInput[]
    connect?: CheckListsWhereUniqueInput | CheckListsWhereUniqueInput[]
    update?: CheckListsUpdateWithWhereUniqueWithoutCardsInput | CheckListsUpdateWithWhereUniqueWithoutCardsInput[]
    updateMany?: CheckListsUpdateManyWithWhereWithoutCardsInput | CheckListsUpdateManyWithWhereWithoutCardsInput[]
    deleteMany?: CheckListsScalarWhereInput | CheckListsScalarWhereInput[]
  }

  export type CommentsUpdateManyWithoutCardsNestedInput = {
    create?: XOR<CommentsCreateWithoutCardsInput, CommentsUncheckedCreateWithoutCardsInput> | CommentsCreateWithoutCardsInput[] | CommentsUncheckedCreateWithoutCardsInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutCardsInput | CommentsCreateOrConnectWithoutCardsInput[]
    upsert?: CommentsUpsertWithWhereUniqueWithoutCardsInput | CommentsUpsertWithWhereUniqueWithoutCardsInput[]
    createMany?: CommentsCreateManyCardsInputEnvelope
    set?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    disconnect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    delete?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    update?: CommentsUpdateWithWhereUniqueWithoutCardsInput | CommentsUpdateWithWhereUniqueWithoutCardsInput[]
    updateMany?: CommentsUpdateManyWithWhereWithoutCardsInput | CommentsUpdateManyWithWhereWithoutCardsInput[]
    deleteMany?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
  }

  export type ListCardsUpdateManyWithoutCardsNestedInput = {
    create?: XOR<ListCardsCreateWithoutCardsInput, ListCardsUncheckedCreateWithoutCardsInput> | ListCardsCreateWithoutCardsInput[] | ListCardsUncheckedCreateWithoutCardsInput[]
    connectOrCreate?: ListCardsCreateOrConnectWithoutCardsInput | ListCardsCreateOrConnectWithoutCardsInput[]
    upsert?: ListCardsUpsertWithWhereUniqueWithoutCardsInput | ListCardsUpsertWithWhereUniqueWithoutCardsInput[]
    createMany?: ListCardsCreateManyCardsInputEnvelope
    set?: ListCardsWhereUniqueInput | ListCardsWhereUniqueInput[]
    disconnect?: ListCardsWhereUniqueInput | ListCardsWhereUniqueInput[]
    delete?: ListCardsWhereUniqueInput | ListCardsWhereUniqueInput[]
    connect?: ListCardsWhereUniqueInput | ListCardsWhereUniqueInput[]
    update?: ListCardsUpdateWithWhereUniqueWithoutCardsInput | ListCardsUpdateWithWhereUniqueWithoutCardsInput[]
    updateMany?: ListCardsUpdateManyWithWhereWithoutCardsInput | ListCardsUpdateManyWithWhereWithoutCardsInput[]
    deleteMany?: ListCardsScalarWhereInput | ListCardsScalarWhereInput[]
  }

  export type CheckListsUncheckedUpdateManyWithoutCardsNestedInput = {
    create?: XOR<CheckListsCreateWithoutCardsInput, CheckListsUncheckedCreateWithoutCardsInput> | CheckListsCreateWithoutCardsInput[] | CheckListsUncheckedCreateWithoutCardsInput[]
    connectOrCreate?: CheckListsCreateOrConnectWithoutCardsInput | CheckListsCreateOrConnectWithoutCardsInput[]
    upsert?: CheckListsUpsertWithWhereUniqueWithoutCardsInput | CheckListsUpsertWithWhereUniqueWithoutCardsInput[]
    createMany?: CheckListsCreateManyCardsInputEnvelope
    set?: CheckListsWhereUniqueInput | CheckListsWhereUniqueInput[]
    disconnect?: CheckListsWhereUniqueInput | CheckListsWhereUniqueInput[]
    delete?: CheckListsWhereUniqueInput | CheckListsWhereUniqueInput[]
    connect?: CheckListsWhereUniqueInput | CheckListsWhereUniqueInput[]
    update?: CheckListsUpdateWithWhereUniqueWithoutCardsInput | CheckListsUpdateWithWhereUniqueWithoutCardsInput[]
    updateMany?: CheckListsUpdateManyWithWhereWithoutCardsInput | CheckListsUpdateManyWithWhereWithoutCardsInput[]
    deleteMany?: CheckListsScalarWhereInput | CheckListsScalarWhereInput[]
  }

  export type CommentsUncheckedUpdateManyWithoutCardsNestedInput = {
    create?: XOR<CommentsCreateWithoutCardsInput, CommentsUncheckedCreateWithoutCardsInput> | CommentsCreateWithoutCardsInput[] | CommentsUncheckedCreateWithoutCardsInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutCardsInput | CommentsCreateOrConnectWithoutCardsInput[]
    upsert?: CommentsUpsertWithWhereUniqueWithoutCardsInput | CommentsUpsertWithWhereUniqueWithoutCardsInput[]
    createMany?: CommentsCreateManyCardsInputEnvelope
    set?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    disconnect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    delete?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    update?: CommentsUpdateWithWhereUniqueWithoutCardsInput | CommentsUpdateWithWhereUniqueWithoutCardsInput[]
    updateMany?: CommentsUpdateManyWithWhereWithoutCardsInput | CommentsUpdateManyWithWhereWithoutCardsInput[]
    deleteMany?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
  }

  export type ListCardsUncheckedUpdateManyWithoutCardsNestedInput = {
    create?: XOR<ListCardsCreateWithoutCardsInput, ListCardsUncheckedCreateWithoutCardsInput> | ListCardsCreateWithoutCardsInput[] | ListCardsUncheckedCreateWithoutCardsInput[]
    connectOrCreate?: ListCardsCreateOrConnectWithoutCardsInput | ListCardsCreateOrConnectWithoutCardsInput[]
    upsert?: ListCardsUpsertWithWhereUniqueWithoutCardsInput | ListCardsUpsertWithWhereUniqueWithoutCardsInput[]
    createMany?: ListCardsCreateManyCardsInputEnvelope
    set?: ListCardsWhereUniqueInput | ListCardsWhereUniqueInput[]
    disconnect?: ListCardsWhereUniqueInput | ListCardsWhereUniqueInput[]
    delete?: ListCardsWhereUniqueInput | ListCardsWhereUniqueInput[]
    connect?: ListCardsWhereUniqueInput | ListCardsWhereUniqueInput[]
    update?: ListCardsUpdateWithWhereUniqueWithoutCardsInput | ListCardsUpdateWithWhereUniqueWithoutCardsInput[]
    updateMany?: ListCardsUpdateManyWithWhereWithoutCardsInput | ListCardsUpdateManyWithWhereWithoutCardsInput[]
    deleteMany?: ListCardsScalarWhereInput | ListCardsScalarWhereInput[]
  }

  export type CardsCreateNestedOneWithoutCheckListsInput = {
    create?: XOR<CardsCreateWithoutCheckListsInput, CardsUncheckedCreateWithoutCheckListsInput>
    connectOrCreate?: CardsCreateOrConnectWithoutCheckListsInput
    connect?: CardsWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type CardsUpdateOneWithoutCheckListsNestedInput = {
    create?: XOR<CardsCreateWithoutCheckListsInput, CardsUncheckedCreateWithoutCheckListsInput>
    connectOrCreate?: CardsCreateOrConnectWithoutCheckListsInput
    upsert?: CardsUpsertWithoutCheckListsInput
    disconnect?: CardsWhereInput | boolean
    delete?: CardsWhereInput | boolean
    connect?: CardsWhereUniqueInput
    update?: XOR<XOR<CardsUpdateToOneWithWhereWithoutCheckListsInput, CardsUpdateWithoutCheckListsInput>, CardsUncheckedUpdateWithoutCheckListsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CardsCreateNestedOneWithoutCommentsInput = {
    create?: XOR<CardsCreateWithoutCommentsInput, CardsUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: CardsCreateOrConnectWithoutCommentsInput
    connect?: CardsWhereUniqueInput
  }

  export type CardsUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<CardsCreateWithoutCommentsInput, CardsUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: CardsCreateOrConnectWithoutCommentsInput
    upsert?: CardsUpsertWithoutCommentsInput
    disconnect?: CardsWhereInput | boolean
    delete?: CardsWhereInput | boolean
    connect?: CardsWhereUniqueInput
    update?: XOR<XOR<CardsUpdateToOneWithWhereWithoutCommentsInput, CardsUpdateWithoutCommentsInput>, CardsUncheckedUpdateWithoutCommentsInput>
  }

  export type CardsCreateNestedOneWithoutListCardsInput = {
    create?: XOR<CardsCreateWithoutListCardsInput, CardsUncheckedCreateWithoutListCardsInput>
    connectOrCreate?: CardsCreateOrConnectWithoutListCardsInput
    connect?: CardsWhereUniqueInput
  }

  export type ListsCreateNestedOneWithoutListCardsInput = {
    create?: XOR<ListsCreateWithoutListCardsInput, ListsUncheckedCreateWithoutListCardsInput>
    connectOrCreate?: ListsCreateOrConnectWithoutListCardsInput
    connect?: ListsWhereUniqueInput
  }

  export type CardsUpdateOneRequiredWithoutListCardsNestedInput = {
    create?: XOR<CardsCreateWithoutListCardsInput, CardsUncheckedCreateWithoutListCardsInput>
    connectOrCreate?: CardsCreateOrConnectWithoutListCardsInput
    upsert?: CardsUpsertWithoutListCardsInput
    connect?: CardsWhereUniqueInput
    update?: XOR<XOR<CardsUpdateToOneWithWhereWithoutListCardsInput, CardsUpdateWithoutListCardsInput>, CardsUncheckedUpdateWithoutListCardsInput>
  }

  export type ListsUpdateOneRequiredWithoutListCardsNestedInput = {
    create?: XOR<ListsCreateWithoutListCardsInput, ListsUncheckedCreateWithoutListCardsInput>
    connectOrCreate?: ListsCreateOrConnectWithoutListCardsInput
    upsert?: ListsUpsertWithoutListCardsInput
    connect?: ListsWhereUniqueInput
    update?: XOR<XOR<ListsUpdateToOneWithWhereWithoutListCardsInput, ListsUpdateWithoutListCardsInput>, ListsUncheckedUpdateWithoutListCardsInput>
  }

  export type BoardListsCreateNestedManyWithoutListsInput = {
    create?: XOR<BoardListsCreateWithoutListsInput, BoardListsUncheckedCreateWithoutListsInput> | BoardListsCreateWithoutListsInput[] | BoardListsUncheckedCreateWithoutListsInput[]
    connectOrCreate?: BoardListsCreateOrConnectWithoutListsInput | BoardListsCreateOrConnectWithoutListsInput[]
    createMany?: BoardListsCreateManyListsInputEnvelope
    connect?: BoardListsWhereUniqueInput | BoardListsWhereUniqueInput[]
  }

  export type ListCardsCreateNestedManyWithoutListsInput = {
    create?: XOR<ListCardsCreateWithoutListsInput, ListCardsUncheckedCreateWithoutListsInput> | ListCardsCreateWithoutListsInput[] | ListCardsUncheckedCreateWithoutListsInput[]
    connectOrCreate?: ListCardsCreateOrConnectWithoutListsInput | ListCardsCreateOrConnectWithoutListsInput[]
    createMany?: ListCardsCreateManyListsInputEnvelope
    connect?: ListCardsWhereUniqueInput | ListCardsWhereUniqueInput[]
  }

  export type BoardListsUncheckedCreateNestedManyWithoutListsInput = {
    create?: XOR<BoardListsCreateWithoutListsInput, BoardListsUncheckedCreateWithoutListsInput> | BoardListsCreateWithoutListsInput[] | BoardListsUncheckedCreateWithoutListsInput[]
    connectOrCreate?: BoardListsCreateOrConnectWithoutListsInput | BoardListsCreateOrConnectWithoutListsInput[]
    createMany?: BoardListsCreateManyListsInputEnvelope
    connect?: BoardListsWhereUniqueInput | BoardListsWhereUniqueInput[]
  }

  export type ListCardsUncheckedCreateNestedManyWithoutListsInput = {
    create?: XOR<ListCardsCreateWithoutListsInput, ListCardsUncheckedCreateWithoutListsInput> | ListCardsCreateWithoutListsInput[] | ListCardsUncheckedCreateWithoutListsInput[]
    connectOrCreate?: ListCardsCreateOrConnectWithoutListsInput | ListCardsCreateOrConnectWithoutListsInput[]
    createMany?: ListCardsCreateManyListsInputEnvelope
    connect?: ListCardsWhereUniqueInput | ListCardsWhereUniqueInput[]
  }

  export type BoardListsUpdateManyWithoutListsNestedInput = {
    create?: XOR<BoardListsCreateWithoutListsInput, BoardListsUncheckedCreateWithoutListsInput> | BoardListsCreateWithoutListsInput[] | BoardListsUncheckedCreateWithoutListsInput[]
    connectOrCreate?: BoardListsCreateOrConnectWithoutListsInput | BoardListsCreateOrConnectWithoutListsInput[]
    upsert?: BoardListsUpsertWithWhereUniqueWithoutListsInput | BoardListsUpsertWithWhereUniqueWithoutListsInput[]
    createMany?: BoardListsCreateManyListsInputEnvelope
    set?: BoardListsWhereUniqueInput | BoardListsWhereUniqueInput[]
    disconnect?: BoardListsWhereUniqueInput | BoardListsWhereUniqueInput[]
    delete?: BoardListsWhereUniqueInput | BoardListsWhereUniqueInput[]
    connect?: BoardListsWhereUniqueInput | BoardListsWhereUniqueInput[]
    update?: BoardListsUpdateWithWhereUniqueWithoutListsInput | BoardListsUpdateWithWhereUniqueWithoutListsInput[]
    updateMany?: BoardListsUpdateManyWithWhereWithoutListsInput | BoardListsUpdateManyWithWhereWithoutListsInput[]
    deleteMany?: BoardListsScalarWhereInput | BoardListsScalarWhereInput[]
  }

  export type ListCardsUpdateManyWithoutListsNestedInput = {
    create?: XOR<ListCardsCreateWithoutListsInput, ListCardsUncheckedCreateWithoutListsInput> | ListCardsCreateWithoutListsInput[] | ListCardsUncheckedCreateWithoutListsInput[]
    connectOrCreate?: ListCardsCreateOrConnectWithoutListsInput | ListCardsCreateOrConnectWithoutListsInput[]
    upsert?: ListCardsUpsertWithWhereUniqueWithoutListsInput | ListCardsUpsertWithWhereUniqueWithoutListsInput[]
    createMany?: ListCardsCreateManyListsInputEnvelope
    set?: ListCardsWhereUniqueInput | ListCardsWhereUniqueInput[]
    disconnect?: ListCardsWhereUniqueInput | ListCardsWhereUniqueInput[]
    delete?: ListCardsWhereUniqueInput | ListCardsWhereUniqueInput[]
    connect?: ListCardsWhereUniqueInput | ListCardsWhereUniqueInput[]
    update?: ListCardsUpdateWithWhereUniqueWithoutListsInput | ListCardsUpdateWithWhereUniqueWithoutListsInput[]
    updateMany?: ListCardsUpdateManyWithWhereWithoutListsInput | ListCardsUpdateManyWithWhereWithoutListsInput[]
    deleteMany?: ListCardsScalarWhereInput | ListCardsScalarWhereInput[]
  }

  export type BoardListsUncheckedUpdateManyWithoutListsNestedInput = {
    create?: XOR<BoardListsCreateWithoutListsInput, BoardListsUncheckedCreateWithoutListsInput> | BoardListsCreateWithoutListsInput[] | BoardListsUncheckedCreateWithoutListsInput[]
    connectOrCreate?: BoardListsCreateOrConnectWithoutListsInput | BoardListsCreateOrConnectWithoutListsInput[]
    upsert?: BoardListsUpsertWithWhereUniqueWithoutListsInput | BoardListsUpsertWithWhereUniqueWithoutListsInput[]
    createMany?: BoardListsCreateManyListsInputEnvelope
    set?: BoardListsWhereUniqueInput | BoardListsWhereUniqueInput[]
    disconnect?: BoardListsWhereUniqueInput | BoardListsWhereUniqueInput[]
    delete?: BoardListsWhereUniqueInput | BoardListsWhereUniqueInput[]
    connect?: BoardListsWhereUniqueInput | BoardListsWhereUniqueInput[]
    update?: BoardListsUpdateWithWhereUniqueWithoutListsInput | BoardListsUpdateWithWhereUniqueWithoutListsInput[]
    updateMany?: BoardListsUpdateManyWithWhereWithoutListsInput | BoardListsUpdateManyWithWhereWithoutListsInput[]
    deleteMany?: BoardListsScalarWhereInput | BoardListsScalarWhereInput[]
  }

  export type ListCardsUncheckedUpdateManyWithoutListsNestedInput = {
    create?: XOR<ListCardsCreateWithoutListsInput, ListCardsUncheckedCreateWithoutListsInput> | ListCardsCreateWithoutListsInput[] | ListCardsUncheckedCreateWithoutListsInput[]
    connectOrCreate?: ListCardsCreateOrConnectWithoutListsInput | ListCardsCreateOrConnectWithoutListsInput[]
    upsert?: ListCardsUpsertWithWhereUniqueWithoutListsInput | ListCardsUpsertWithWhereUniqueWithoutListsInput[]
    createMany?: ListCardsCreateManyListsInputEnvelope
    set?: ListCardsWhereUniqueInput | ListCardsWhereUniqueInput[]
    disconnect?: ListCardsWhereUniqueInput | ListCardsWhereUniqueInput[]
    delete?: ListCardsWhereUniqueInput | ListCardsWhereUniqueInput[]
    connect?: ListCardsWhereUniqueInput | ListCardsWhereUniqueInput[]
    update?: ListCardsUpdateWithWhereUniqueWithoutListsInput | ListCardsUpdateWithWhereUniqueWithoutListsInput[]
    updateMany?: ListCardsUpdateManyWithWhereWithoutListsInput | ListCardsUpdateManyWithWhereWithoutListsInput[]
    deleteMany?: ListCardsScalarWhereInput | ListCardsScalarWhereInput[]
  }

  export type BoardMembersCreateNestedManyWithoutUsersInput = {
    create?: XOR<BoardMembersCreateWithoutUsersInput, BoardMembersUncheckedCreateWithoutUsersInput> | BoardMembersCreateWithoutUsersInput[] | BoardMembersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BoardMembersCreateOrConnectWithoutUsersInput | BoardMembersCreateOrConnectWithoutUsersInput[]
    createMany?: BoardMembersCreateManyUsersInputEnvelope
    connect?: BoardMembersWhereUniqueInput | BoardMembersWhereUniqueInput[]
  }

  export type BoardMembersUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<BoardMembersCreateWithoutUsersInput, BoardMembersUncheckedCreateWithoutUsersInput> | BoardMembersCreateWithoutUsersInput[] | BoardMembersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BoardMembersCreateOrConnectWithoutUsersInput | BoardMembersCreateOrConnectWithoutUsersInput[]
    createMany?: BoardMembersCreateManyUsersInputEnvelope
    connect?: BoardMembersWhereUniqueInput | BoardMembersWhereUniqueInput[]
  }

  export type BoardMembersUpdateManyWithoutUsersNestedInput = {
    create?: XOR<BoardMembersCreateWithoutUsersInput, BoardMembersUncheckedCreateWithoutUsersInput> | BoardMembersCreateWithoutUsersInput[] | BoardMembersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BoardMembersCreateOrConnectWithoutUsersInput | BoardMembersCreateOrConnectWithoutUsersInput[]
    upsert?: BoardMembersUpsertWithWhereUniqueWithoutUsersInput | BoardMembersUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: BoardMembersCreateManyUsersInputEnvelope
    set?: BoardMembersWhereUniqueInput | BoardMembersWhereUniqueInput[]
    disconnect?: BoardMembersWhereUniqueInput | BoardMembersWhereUniqueInput[]
    delete?: BoardMembersWhereUniqueInput | BoardMembersWhereUniqueInput[]
    connect?: BoardMembersWhereUniqueInput | BoardMembersWhereUniqueInput[]
    update?: BoardMembersUpdateWithWhereUniqueWithoutUsersInput | BoardMembersUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: BoardMembersUpdateManyWithWhereWithoutUsersInput | BoardMembersUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: BoardMembersScalarWhereInput | BoardMembersScalarWhereInput[]
  }

  export type BoardMembersUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<BoardMembersCreateWithoutUsersInput, BoardMembersUncheckedCreateWithoutUsersInput> | BoardMembersCreateWithoutUsersInput[] | BoardMembersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BoardMembersCreateOrConnectWithoutUsersInput | BoardMembersCreateOrConnectWithoutUsersInput[]
    upsert?: BoardMembersUpsertWithWhereUniqueWithoutUsersInput | BoardMembersUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: BoardMembersCreateManyUsersInputEnvelope
    set?: BoardMembersWhereUniqueInput | BoardMembersWhereUniqueInput[]
    disconnect?: BoardMembersWhereUniqueInput | BoardMembersWhereUniqueInput[]
    delete?: BoardMembersWhereUniqueInput | BoardMembersWhereUniqueInput[]
    connect?: BoardMembersWhereUniqueInput | BoardMembersWhereUniqueInput[]
    update?: BoardMembersUpdateWithWhereUniqueWithoutUsersInput | BoardMembersUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: BoardMembersUpdateManyWithWhereWithoutUsersInput | BoardMembersUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: BoardMembersScalarWhereInput | BoardMembersScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type BoardsCreateWithoutBoardListsInput = {
    CreatedAt?: Date | string
    Title?: string | null
    UpdatedAt?: Date | string | null
    BoardMembers?: BoardMembersCreateNestedManyWithoutBoardsInput
  }

  export type BoardsUncheckedCreateWithoutBoardListsInput = {
    BoardId?: number
    CreatedAt?: Date | string
    Title?: string | null
    UpdatedAt?: Date | string | null
    BoardMembers?: BoardMembersUncheckedCreateNestedManyWithoutBoardsInput
  }

  export type BoardsCreateOrConnectWithoutBoardListsInput = {
    where: BoardsWhereUniqueInput
    create: XOR<BoardsCreateWithoutBoardListsInput, BoardsUncheckedCreateWithoutBoardListsInput>
  }

  export type ListsCreateWithoutBoardListsInput = {
    CreatedAt?: Date | string
    UpdatedAt?: Date | string | null
    Title?: string | null
    ListCards?: ListCardsCreateNestedManyWithoutListsInput
  }

  export type ListsUncheckedCreateWithoutBoardListsInput = {
    ListId?: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string | null
    Title?: string | null
    ListCards?: ListCardsUncheckedCreateNestedManyWithoutListsInput
  }

  export type ListsCreateOrConnectWithoutBoardListsInput = {
    where: ListsWhereUniqueInput
    create: XOR<ListsCreateWithoutBoardListsInput, ListsUncheckedCreateWithoutBoardListsInput>
  }

  export type BoardsUpsertWithoutBoardListsInput = {
    update: XOR<BoardsUpdateWithoutBoardListsInput, BoardsUncheckedUpdateWithoutBoardListsInput>
    create: XOR<BoardsCreateWithoutBoardListsInput, BoardsUncheckedCreateWithoutBoardListsInput>
    where?: BoardsWhereInput
  }

  export type BoardsUpdateToOneWithWhereWithoutBoardListsInput = {
    where?: BoardsWhereInput
    data: XOR<BoardsUpdateWithoutBoardListsInput, BoardsUncheckedUpdateWithoutBoardListsInput>
  }

  export type BoardsUpdateWithoutBoardListsInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    BoardMembers?: BoardMembersUpdateManyWithoutBoardsNestedInput
  }

  export type BoardsUncheckedUpdateWithoutBoardListsInput = {
    BoardId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    BoardMembers?: BoardMembersUncheckedUpdateManyWithoutBoardsNestedInput
  }

  export type ListsUpsertWithoutBoardListsInput = {
    update: XOR<ListsUpdateWithoutBoardListsInput, ListsUncheckedUpdateWithoutBoardListsInput>
    create: XOR<ListsCreateWithoutBoardListsInput, ListsUncheckedCreateWithoutBoardListsInput>
    where?: ListsWhereInput
  }

  export type ListsUpdateToOneWithWhereWithoutBoardListsInput = {
    where?: ListsWhereInput
    data: XOR<ListsUpdateWithoutBoardListsInput, ListsUncheckedUpdateWithoutBoardListsInput>
  }

  export type ListsUpdateWithoutBoardListsInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    ListCards?: ListCardsUpdateManyWithoutListsNestedInput
  }

  export type ListsUncheckedUpdateWithoutBoardListsInput = {
    ListId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    ListCards?: ListCardsUncheckedUpdateManyWithoutListsNestedInput
  }

  export type BoardsCreateWithoutBoardMembersInput = {
    CreatedAt?: Date | string
    Title?: string | null
    UpdatedAt?: Date | string | null
    BoardLists?: BoardListsCreateNestedManyWithoutBoardsInput
  }

  export type BoardsUncheckedCreateWithoutBoardMembersInput = {
    BoardId?: number
    CreatedAt?: Date | string
    Title?: string | null
    UpdatedAt?: Date | string | null
    BoardLists?: BoardListsUncheckedCreateNestedManyWithoutBoardsInput
  }

  export type BoardsCreateOrConnectWithoutBoardMembersInput = {
    where: BoardsWhereUniqueInput
    create: XOR<BoardsCreateWithoutBoardMembersInput, BoardsUncheckedCreateWithoutBoardMembersInput>
  }

  export type UsersCreateWithoutBoardMembersInput = {
    FirstName?: string | null
    LastName?: string | null
    Email?: string | null
    Password?: string | null
    Username?: string | null
  }

  export type UsersUncheckedCreateWithoutBoardMembersInput = {
    UserId?: number
    FirstName?: string | null
    LastName?: string | null
    Email?: string | null
    Password?: string | null
    Username?: string | null
  }

  export type UsersCreateOrConnectWithoutBoardMembersInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutBoardMembersInput, UsersUncheckedCreateWithoutBoardMembersInput>
  }

  export type BoardsUpsertWithoutBoardMembersInput = {
    update: XOR<BoardsUpdateWithoutBoardMembersInput, BoardsUncheckedUpdateWithoutBoardMembersInput>
    create: XOR<BoardsCreateWithoutBoardMembersInput, BoardsUncheckedCreateWithoutBoardMembersInput>
    where?: BoardsWhereInput
  }

  export type BoardsUpdateToOneWithWhereWithoutBoardMembersInput = {
    where?: BoardsWhereInput
    data: XOR<BoardsUpdateWithoutBoardMembersInput, BoardsUncheckedUpdateWithoutBoardMembersInput>
  }

  export type BoardsUpdateWithoutBoardMembersInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    BoardLists?: BoardListsUpdateManyWithoutBoardsNestedInput
  }

  export type BoardsUncheckedUpdateWithoutBoardMembersInput = {
    BoardId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    BoardLists?: BoardListsUncheckedUpdateManyWithoutBoardsNestedInput
  }

  export type UsersUpsertWithoutBoardMembersInput = {
    update: XOR<UsersUpdateWithoutBoardMembersInput, UsersUncheckedUpdateWithoutBoardMembersInput>
    create: XOR<UsersCreateWithoutBoardMembersInput, UsersUncheckedCreateWithoutBoardMembersInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutBoardMembersInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutBoardMembersInput, UsersUncheckedUpdateWithoutBoardMembersInput>
  }

  export type UsersUpdateWithoutBoardMembersInput = {
    FirstName?: NullableStringFieldUpdateOperationsInput | string | null
    LastName?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Password?: NullableStringFieldUpdateOperationsInput | string | null
    Username?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsersUncheckedUpdateWithoutBoardMembersInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    FirstName?: NullableStringFieldUpdateOperationsInput | string | null
    LastName?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Password?: NullableStringFieldUpdateOperationsInput | string | null
    Username?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BoardListsCreateWithoutBoardsInput = {
    Lists: ListsCreateNestedOneWithoutBoardListsInput
  }

  export type BoardListsUncheckedCreateWithoutBoardsInput = {
    ListId: number
  }

  export type BoardListsCreateOrConnectWithoutBoardsInput = {
    where: BoardListsWhereUniqueInput
    create: XOR<BoardListsCreateWithoutBoardsInput, BoardListsUncheckedCreateWithoutBoardsInput>
  }

  export type BoardListsCreateManyBoardsInputEnvelope = {
    data: BoardListsCreateManyBoardsInput | BoardListsCreateManyBoardsInput[]
    skipDuplicates?: boolean
  }

  export type BoardMembersCreateWithoutBoardsInput = {
    Users: UsersCreateNestedOneWithoutBoardMembersInput
  }

  export type BoardMembersUncheckedCreateWithoutBoardsInput = {
    MemberId: number
  }

  export type BoardMembersCreateOrConnectWithoutBoardsInput = {
    where: BoardMembersWhereUniqueInput
    create: XOR<BoardMembersCreateWithoutBoardsInput, BoardMembersUncheckedCreateWithoutBoardsInput>
  }

  export type BoardMembersCreateManyBoardsInputEnvelope = {
    data: BoardMembersCreateManyBoardsInput | BoardMembersCreateManyBoardsInput[]
    skipDuplicates?: boolean
  }

  export type BoardListsUpsertWithWhereUniqueWithoutBoardsInput = {
    where: BoardListsWhereUniqueInput
    update: XOR<BoardListsUpdateWithoutBoardsInput, BoardListsUncheckedUpdateWithoutBoardsInput>
    create: XOR<BoardListsCreateWithoutBoardsInput, BoardListsUncheckedCreateWithoutBoardsInput>
  }

  export type BoardListsUpdateWithWhereUniqueWithoutBoardsInput = {
    where: BoardListsWhereUniqueInput
    data: XOR<BoardListsUpdateWithoutBoardsInput, BoardListsUncheckedUpdateWithoutBoardsInput>
  }

  export type BoardListsUpdateManyWithWhereWithoutBoardsInput = {
    where: BoardListsScalarWhereInput
    data: XOR<BoardListsUpdateManyMutationInput, BoardListsUncheckedUpdateManyWithoutBoardsInput>
  }

  export type BoardListsScalarWhereInput = {
    AND?: BoardListsScalarWhereInput | BoardListsScalarWhereInput[]
    OR?: BoardListsScalarWhereInput[]
    NOT?: BoardListsScalarWhereInput | BoardListsScalarWhereInput[]
    BoardId?: IntFilter<"BoardLists"> | number
    ListId?: IntFilter<"BoardLists"> | number
  }

  export type BoardMembersUpsertWithWhereUniqueWithoutBoardsInput = {
    where: BoardMembersWhereUniqueInput
    update: XOR<BoardMembersUpdateWithoutBoardsInput, BoardMembersUncheckedUpdateWithoutBoardsInput>
    create: XOR<BoardMembersCreateWithoutBoardsInput, BoardMembersUncheckedCreateWithoutBoardsInput>
  }

  export type BoardMembersUpdateWithWhereUniqueWithoutBoardsInput = {
    where: BoardMembersWhereUniqueInput
    data: XOR<BoardMembersUpdateWithoutBoardsInput, BoardMembersUncheckedUpdateWithoutBoardsInput>
  }

  export type BoardMembersUpdateManyWithWhereWithoutBoardsInput = {
    where: BoardMembersScalarWhereInput
    data: XOR<BoardMembersUpdateManyMutationInput, BoardMembersUncheckedUpdateManyWithoutBoardsInput>
  }

  export type BoardMembersScalarWhereInput = {
    AND?: BoardMembersScalarWhereInput | BoardMembersScalarWhereInput[]
    OR?: BoardMembersScalarWhereInput[]
    NOT?: BoardMembersScalarWhereInput | BoardMembersScalarWhereInput[]
    BoardId?: IntFilter<"BoardMembers"> | number
    MemberId?: IntFilter<"BoardMembers"> | number
  }

  export type CheckListsCreateWithoutCardsInput = {
    IsChecked?: boolean | null
    Title?: string | null
  }

  export type CheckListsUncheckedCreateWithoutCardsInput = {
    CheckListId?: number
    IsChecked?: boolean | null
    Title?: string | null
  }

  export type CheckListsCreateOrConnectWithoutCardsInput = {
    where: CheckListsWhereUniqueInput
    create: XOR<CheckListsCreateWithoutCardsInput, CheckListsUncheckedCreateWithoutCardsInput>
  }

  export type CheckListsCreateManyCardsInputEnvelope = {
    data: CheckListsCreateManyCardsInput | CheckListsCreateManyCardsInput[]
    skipDuplicates?: boolean
  }

  export type CommentsCreateWithoutCardsInput = {
    CreatedAt?: Date | string
    UpdatedAt?: Date | string | null
    Comment?: string | null
  }

  export type CommentsUncheckedCreateWithoutCardsInput = {
    CommentId?: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string | null
    Comment?: string | null
  }

  export type CommentsCreateOrConnectWithoutCardsInput = {
    where: CommentsWhereUniqueInput
    create: XOR<CommentsCreateWithoutCardsInput, CommentsUncheckedCreateWithoutCardsInput>
  }

  export type CommentsCreateManyCardsInputEnvelope = {
    data: CommentsCreateManyCardsInput | CommentsCreateManyCardsInput[]
    skipDuplicates?: boolean
  }

  export type ListCardsCreateWithoutCardsInput = {
    Lists: ListsCreateNestedOneWithoutListCardsInput
  }

  export type ListCardsUncheckedCreateWithoutCardsInput = {
    ListId: number
  }

  export type ListCardsCreateOrConnectWithoutCardsInput = {
    where: ListCardsWhereUniqueInput
    create: XOR<ListCardsCreateWithoutCardsInput, ListCardsUncheckedCreateWithoutCardsInput>
  }

  export type ListCardsCreateManyCardsInputEnvelope = {
    data: ListCardsCreateManyCardsInput | ListCardsCreateManyCardsInput[]
    skipDuplicates?: boolean
  }

  export type CheckListsUpsertWithWhereUniqueWithoutCardsInput = {
    where: CheckListsWhereUniqueInput
    update: XOR<CheckListsUpdateWithoutCardsInput, CheckListsUncheckedUpdateWithoutCardsInput>
    create: XOR<CheckListsCreateWithoutCardsInput, CheckListsUncheckedCreateWithoutCardsInput>
  }

  export type CheckListsUpdateWithWhereUniqueWithoutCardsInput = {
    where: CheckListsWhereUniqueInput
    data: XOR<CheckListsUpdateWithoutCardsInput, CheckListsUncheckedUpdateWithoutCardsInput>
  }

  export type CheckListsUpdateManyWithWhereWithoutCardsInput = {
    where: CheckListsScalarWhereInput
    data: XOR<CheckListsUpdateManyMutationInput, CheckListsUncheckedUpdateManyWithoutCardsInput>
  }

  export type CheckListsScalarWhereInput = {
    AND?: CheckListsScalarWhereInput | CheckListsScalarWhereInput[]
    OR?: CheckListsScalarWhereInput[]
    NOT?: CheckListsScalarWhereInput | CheckListsScalarWhereInput[]
    CheckListId?: IntFilter<"CheckLists"> | number
    IsChecked?: BoolNullableFilter<"CheckLists"> | boolean | null
    Title?: StringNullableFilter<"CheckLists"> | string | null
    CardId?: IntNullableFilter<"CheckLists"> | number | null
  }

  export type CommentsUpsertWithWhereUniqueWithoutCardsInput = {
    where: CommentsWhereUniqueInput
    update: XOR<CommentsUpdateWithoutCardsInput, CommentsUncheckedUpdateWithoutCardsInput>
    create: XOR<CommentsCreateWithoutCardsInput, CommentsUncheckedCreateWithoutCardsInput>
  }

  export type CommentsUpdateWithWhereUniqueWithoutCardsInput = {
    where: CommentsWhereUniqueInput
    data: XOR<CommentsUpdateWithoutCardsInput, CommentsUncheckedUpdateWithoutCardsInput>
  }

  export type CommentsUpdateManyWithWhereWithoutCardsInput = {
    where: CommentsScalarWhereInput
    data: XOR<CommentsUpdateManyMutationInput, CommentsUncheckedUpdateManyWithoutCardsInput>
  }

  export type CommentsScalarWhereInput = {
    AND?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
    OR?: CommentsScalarWhereInput[]
    NOT?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
    CommentId?: IntFilter<"Comments"> | number
    CreatedAt?: DateTimeFilter<"Comments"> | Date | string
    UpdatedAt?: DateTimeNullableFilter<"Comments"> | Date | string | null
    Comment?: StringNullableFilter<"Comments"> | string | null
    CardId?: IntNullableFilter<"Comments"> | number | null
  }

  export type ListCardsUpsertWithWhereUniqueWithoutCardsInput = {
    where: ListCardsWhereUniqueInput
    update: XOR<ListCardsUpdateWithoutCardsInput, ListCardsUncheckedUpdateWithoutCardsInput>
    create: XOR<ListCardsCreateWithoutCardsInput, ListCardsUncheckedCreateWithoutCardsInput>
  }

  export type ListCardsUpdateWithWhereUniqueWithoutCardsInput = {
    where: ListCardsWhereUniqueInput
    data: XOR<ListCardsUpdateWithoutCardsInput, ListCardsUncheckedUpdateWithoutCardsInput>
  }

  export type ListCardsUpdateManyWithWhereWithoutCardsInput = {
    where: ListCardsScalarWhereInput
    data: XOR<ListCardsUpdateManyMutationInput, ListCardsUncheckedUpdateManyWithoutCardsInput>
  }

  export type ListCardsScalarWhereInput = {
    AND?: ListCardsScalarWhereInput | ListCardsScalarWhereInput[]
    OR?: ListCardsScalarWhereInput[]
    NOT?: ListCardsScalarWhereInput | ListCardsScalarWhereInput[]
    ListId?: IntFilter<"ListCards"> | number
    CardId?: IntFilter<"ListCards"> | number
  }

  export type CardsCreateWithoutCheckListsInput = {
    Title?: string | null
    DueDate?: Date | string | null
    Description?: string | null
    ReminderDate?: Date | string | null
    Comments?: CommentsCreateNestedManyWithoutCardsInput
    ListCards?: ListCardsCreateNestedManyWithoutCardsInput
  }

  export type CardsUncheckedCreateWithoutCheckListsInput = {
    CardId?: number
    Title?: string | null
    DueDate?: Date | string | null
    Description?: string | null
    ReminderDate?: Date | string | null
    Comments?: CommentsUncheckedCreateNestedManyWithoutCardsInput
    ListCards?: ListCardsUncheckedCreateNestedManyWithoutCardsInput
  }

  export type CardsCreateOrConnectWithoutCheckListsInput = {
    where: CardsWhereUniqueInput
    create: XOR<CardsCreateWithoutCheckListsInput, CardsUncheckedCreateWithoutCheckListsInput>
  }

  export type CardsUpsertWithoutCheckListsInput = {
    update: XOR<CardsUpdateWithoutCheckListsInput, CardsUncheckedUpdateWithoutCheckListsInput>
    create: XOR<CardsCreateWithoutCheckListsInput, CardsUncheckedCreateWithoutCheckListsInput>
    where?: CardsWhereInput
  }

  export type CardsUpdateToOneWithWhereWithoutCheckListsInput = {
    where?: CardsWhereInput
    data: XOR<CardsUpdateWithoutCheckListsInput, CardsUncheckedUpdateWithoutCheckListsInput>
  }

  export type CardsUpdateWithoutCheckListsInput = {
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    DueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    ReminderDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Comments?: CommentsUpdateManyWithoutCardsNestedInput
    ListCards?: ListCardsUpdateManyWithoutCardsNestedInput
  }

  export type CardsUncheckedUpdateWithoutCheckListsInput = {
    CardId?: IntFieldUpdateOperationsInput | number
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    DueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    ReminderDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Comments?: CommentsUncheckedUpdateManyWithoutCardsNestedInput
    ListCards?: ListCardsUncheckedUpdateManyWithoutCardsNestedInput
  }

  export type CardsCreateWithoutCommentsInput = {
    Title?: string | null
    DueDate?: Date | string | null
    Description?: string | null
    ReminderDate?: Date | string | null
    CheckLists?: CheckListsCreateNestedManyWithoutCardsInput
    ListCards?: ListCardsCreateNestedManyWithoutCardsInput
  }

  export type CardsUncheckedCreateWithoutCommentsInput = {
    CardId?: number
    Title?: string | null
    DueDate?: Date | string | null
    Description?: string | null
    ReminderDate?: Date | string | null
    CheckLists?: CheckListsUncheckedCreateNestedManyWithoutCardsInput
    ListCards?: ListCardsUncheckedCreateNestedManyWithoutCardsInput
  }

  export type CardsCreateOrConnectWithoutCommentsInput = {
    where: CardsWhereUniqueInput
    create: XOR<CardsCreateWithoutCommentsInput, CardsUncheckedCreateWithoutCommentsInput>
  }

  export type CardsUpsertWithoutCommentsInput = {
    update: XOR<CardsUpdateWithoutCommentsInput, CardsUncheckedUpdateWithoutCommentsInput>
    create: XOR<CardsCreateWithoutCommentsInput, CardsUncheckedCreateWithoutCommentsInput>
    where?: CardsWhereInput
  }

  export type CardsUpdateToOneWithWhereWithoutCommentsInput = {
    where?: CardsWhereInput
    data: XOR<CardsUpdateWithoutCommentsInput, CardsUncheckedUpdateWithoutCommentsInput>
  }

  export type CardsUpdateWithoutCommentsInput = {
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    DueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    ReminderDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    CheckLists?: CheckListsUpdateManyWithoutCardsNestedInput
    ListCards?: ListCardsUpdateManyWithoutCardsNestedInput
  }

  export type CardsUncheckedUpdateWithoutCommentsInput = {
    CardId?: IntFieldUpdateOperationsInput | number
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    DueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    ReminderDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    CheckLists?: CheckListsUncheckedUpdateManyWithoutCardsNestedInput
    ListCards?: ListCardsUncheckedUpdateManyWithoutCardsNestedInput
  }

  export type CardsCreateWithoutListCardsInput = {
    Title?: string | null
    DueDate?: Date | string | null
    Description?: string | null
    ReminderDate?: Date | string | null
    CheckLists?: CheckListsCreateNestedManyWithoutCardsInput
    Comments?: CommentsCreateNestedManyWithoutCardsInput
  }

  export type CardsUncheckedCreateWithoutListCardsInput = {
    CardId?: number
    Title?: string | null
    DueDate?: Date | string | null
    Description?: string | null
    ReminderDate?: Date | string | null
    CheckLists?: CheckListsUncheckedCreateNestedManyWithoutCardsInput
    Comments?: CommentsUncheckedCreateNestedManyWithoutCardsInput
  }

  export type CardsCreateOrConnectWithoutListCardsInput = {
    where: CardsWhereUniqueInput
    create: XOR<CardsCreateWithoutListCardsInput, CardsUncheckedCreateWithoutListCardsInput>
  }

  export type ListsCreateWithoutListCardsInput = {
    CreatedAt?: Date | string
    UpdatedAt?: Date | string | null
    Title?: string | null
    BoardLists?: BoardListsCreateNestedManyWithoutListsInput
  }

  export type ListsUncheckedCreateWithoutListCardsInput = {
    ListId?: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string | null
    Title?: string | null
    BoardLists?: BoardListsUncheckedCreateNestedManyWithoutListsInput
  }

  export type ListsCreateOrConnectWithoutListCardsInput = {
    where: ListsWhereUniqueInput
    create: XOR<ListsCreateWithoutListCardsInput, ListsUncheckedCreateWithoutListCardsInput>
  }

  export type CardsUpsertWithoutListCardsInput = {
    update: XOR<CardsUpdateWithoutListCardsInput, CardsUncheckedUpdateWithoutListCardsInput>
    create: XOR<CardsCreateWithoutListCardsInput, CardsUncheckedCreateWithoutListCardsInput>
    where?: CardsWhereInput
  }

  export type CardsUpdateToOneWithWhereWithoutListCardsInput = {
    where?: CardsWhereInput
    data: XOR<CardsUpdateWithoutListCardsInput, CardsUncheckedUpdateWithoutListCardsInput>
  }

  export type CardsUpdateWithoutListCardsInput = {
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    DueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    ReminderDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    CheckLists?: CheckListsUpdateManyWithoutCardsNestedInput
    Comments?: CommentsUpdateManyWithoutCardsNestedInput
  }

  export type CardsUncheckedUpdateWithoutListCardsInput = {
    CardId?: IntFieldUpdateOperationsInput | number
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    DueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    ReminderDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    CheckLists?: CheckListsUncheckedUpdateManyWithoutCardsNestedInput
    Comments?: CommentsUncheckedUpdateManyWithoutCardsNestedInput
  }

  export type ListsUpsertWithoutListCardsInput = {
    update: XOR<ListsUpdateWithoutListCardsInput, ListsUncheckedUpdateWithoutListCardsInput>
    create: XOR<ListsCreateWithoutListCardsInput, ListsUncheckedCreateWithoutListCardsInput>
    where?: ListsWhereInput
  }

  export type ListsUpdateToOneWithWhereWithoutListCardsInput = {
    where?: ListsWhereInput
    data: XOR<ListsUpdateWithoutListCardsInput, ListsUncheckedUpdateWithoutListCardsInput>
  }

  export type ListsUpdateWithoutListCardsInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    BoardLists?: BoardListsUpdateManyWithoutListsNestedInput
  }

  export type ListsUncheckedUpdateWithoutListCardsInput = {
    ListId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Title?: NullableStringFieldUpdateOperationsInput | string | null
    BoardLists?: BoardListsUncheckedUpdateManyWithoutListsNestedInput
  }

  export type BoardListsCreateWithoutListsInput = {
    Boards: BoardsCreateNestedOneWithoutBoardListsInput
  }

  export type BoardListsUncheckedCreateWithoutListsInput = {
    BoardId: number
  }

  export type BoardListsCreateOrConnectWithoutListsInput = {
    where: BoardListsWhereUniqueInput
    create: XOR<BoardListsCreateWithoutListsInput, BoardListsUncheckedCreateWithoutListsInput>
  }

  export type BoardListsCreateManyListsInputEnvelope = {
    data: BoardListsCreateManyListsInput | BoardListsCreateManyListsInput[]
    skipDuplicates?: boolean
  }

  export type ListCardsCreateWithoutListsInput = {
    Cards: CardsCreateNestedOneWithoutListCardsInput
  }

  export type ListCardsUncheckedCreateWithoutListsInput = {
    CardId: number
  }

  export type ListCardsCreateOrConnectWithoutListsInput = {
    where: ListCardsWhereUniqueInput
    create: XOR<ListCardsCreateWithoutListsInput, ListCardsUncheckedCreateWithoutListsInput>
  }

  export type ListCardsCreateManyListsInputEnvelope = {
    data: ListCardsCreateManyListsInput | ListCardsCreateManyListsInput[]
    skipDuplicates?: boolean
  }

  export type BoardListsUpsertWithWhereUniqueWithoutListsInput = {
    where: BoardListsWhereUniqueInput
    update: XOR<BoardListsUpdateWithoutListsInput, BoardListsUncheckedUpdateWithoutListsInput>
    create: XOR<BoardListsCreateWithoutListsInput, BoardListsUncheckedCreateWithoutListsInput>
  }

  export type BoardListsUpdateWithWhereUniqueWithoutListsInput = {
    where: BoardListsWhereUniqueInput
    data: XOR<BoardListsUpdateWithoutListsInput, BoardListsUncheckedUpdateWithoutListsInput>
  }

  export type BoardListsUpdateManyWithWhereWithoutListsInput = {
    where: BoardListsScalarWhereInput
    data: XOR<BoardListsUpdateManyMutationInput, BoardListsUncheckedUpdateManyWithoutListsInput>
  }

  export type ListCardsUpsertWithWhereUniqueWithoutListsInput = {
    where: ListCardsWhereUniqueInput
    update: XOR<ListCardsUpdateWithoutListsInput, ListCardsUncheckedUpdateWithoutListsInput>
    create: XOR<ListCardsCreateWithoutListsInput, ListCardsUncheckedCreateWithoutListsInput>
  }

  export type ListCardsUpdateWithWhereUniqueWithoutListsInput = {
    where: ListCardsWhereUniqueInput
    data: XOR<ListCardsUpdateWithoutListsInput, ListCardsUncheckedUpdateWithoutListsInput>
  }

  export type ListCardsUpdateManyWithWhereWithoutListsInput = {
    where: ListCardsScalarWhereInput
    data: XOR<ListCardsUpdateManyMutationInput, ListCardsUncheckedUpdateManyWithoutListsInput>
  }

  export type BoardMembersCreateWithoutUsersInput = {
    Boards: BoardsCreateNestedOneWithoutBoardMembersInput
  }

  export type BoardMembersUncheckedCreateWithoutUsersInput = {
    BoardId: number
  }

  export type BoardMembersCreateOrConnectWithoutUsersInput = {
    where: BoardMembersWhereUniqueInput
    create: XOR<BoardMembersCreateWithoutUsersInput, BoardMembersUncheckedCreateWithoutUsersInput>
  }

  export type BoardMembersCreateManyUsersInputEnvelope = {
    data: BoardMembersCreateManyUsersInput | BoardMembersCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type BoardMembersUpsertWithWhereUniqueWithoutUsersInput = {
    where: BoardMembersWhereUniqueInput
    update: XOR<BoardMembersUpdateWithoutUsersInput, BoardMembersUncheckedUpdateWithoutUsersInput>
    create: XOR<BoardMembersCreateWithoutUsersInput, BoardMembersUncheckedCreateWithoutUsersInput>
  }

  export type BoardMembersUpdateWithWhereUniqueWithoutUsersInput = {
    where: BoardMembersWhereUniqueInput
    data: XOR<BoardMembersUpdateWithoutUsersInput, BoardMembersUncheckedUpdateWithoutUsersInput>
  }

  export type BoardMembersUpdateManyWithWhereWithoutUsersInput = {
    where: BoardMembersScalarWhereInput
    data: XOR<BoardMembersUpdateManyMutationInput, BoardMembersUncheckedUpdateManyWithoutUsersInput>
  }

  export type BoardListsCreateManyBoardsInput = {
    ListId: number
  }

  export type BoardMembersCreateManyBoardsInput = {
    MemberId: number
  }

  export type BoardListsUpdateWithoutBoardsInput = {
    Lists?: ListsUpdateOneRequiredWithoutBoardListsNestedInput
  }

  export type BoardListsUncheckedUpdateWithoutBoardsInput = {
    ListId?: IntFieldUpdateOperationsInput | number
  }

  export type BoardListsUncheckedUpdateManyWithoutBoardsInput = {
    ListId?: IntFieldUpdateOperationsInput | number
  }

  export type BoardMembersUpdateWithoutBoardsInput = {
    Users?: UsersUpdateOneRequiredWithoutBoardMembersNestedInput
  }

  export type BoardMembersUncheckedUpdateWithoutBoardsInput = {
    MemberId?: IntFieldUpdateOperationsInput | number
  }

  export type BoardMembersUncheckedUpdateManyWithoutBoardsInput = {
    MemberId?: IntFieldUpdateOperationsInput | number
  }

  export type CheckListsCreateManyCardsInput = {
    CheckListId?: number
    IsChecked?: boolean | null
    Title?: string | null
  }

  export type CommentsCreateManyCardsInput = {
    CommentId?: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string | null
    Comment?: string | null
  }

  export type ListCardsCreateManyCardsInput = {
    ListId: number
  }

  export type CheckListsUpdateWithoutCardsInput = {
    IsChecked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CheckListsUncheckedUpdateWithoutCardsInput = {
    CheckListId?: IntFieldUpdateOperationsInput | number
    IsChecked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CheckListsUncheckedUpdateManyWithoutCardsInput = {
    CheckListId?: IntFieldUpdateOperationsInput | number
    IsChecked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentsUpdateWithoutCardsInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Comment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentsUncheckedUpdateWithoutCardsInput = {
    CommentId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Comment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentsUncheckedUpdateManyWithoutCardsInput = {
    CommentId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Comment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ListCardsUpdateWithoutCardsInput = {
    Lists?: ListsUpdateOneRequiredWithoutListCardsNestedInput
  }

  export type ListCardsUncheckedUpdateWithoutCardsInput = {
    ListId?: IntFieldUpdateOperationsInput | number
  }

  export type ListCardsUncheckedUpdateManyWithoutCardsInput = {
    ListId?: IntFieldUpdateOperationsInput | number
  }

  export type BoardListsCreateManyListsInput = {
    BoardId: number
  }

  export type ListCardsCreateManyListsInput = {
    CardId: number
  }

  export type BoardListsUpdateWithoutListsInput = {
    Boards?: BoardsUpdateOneRequiredWithoutBoardListsNestedInput
  }

  export type BoardListsUncheckedUpdateWithoutListsInput = {
    BoardId?: IntFieldUpdateOperationsInput | number
  }

  export type BoardListsUncheckedUpdateManyWithoutListsInput = {
    BoardId?: IntFieldUpdateOperationsInput | number
  }

  export type ListCardsUpdateWithoutListsInput = {
    Cards?: CardsUpdateOneRequiredWithoutListCardsNestedInput
  }

  export type ListCardsUncheckedUpdateWithoutListsInput = {
    CardId?: IntFieldUpdateOperationsInput | number
  }

  export type ListCardsUncheckedUpdateManyWithoutListsInput = {
    CardId?: IntFieldUpdateOperationsInput | number
  }

  export type BoardMembersCreateManyUsersInput = {
    BoardId: number
  }

  export type BoardMembersUpdateWithoutUsersInput = {
    Boards?: BoardsUpdateOneRequiredWithoutBoardMembersNestedInput
  }

  export type BoardMembersUncheckedUpdateWithoutUsersInput = {
    BoardId?: IntFieldUpdateOperationsInput | number
  }

  export type BoardMembersUncheckedUpdateManyWithoutUsersInput = {
    BoardId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use BoardsCountOutputTypeDefaultArgs instead
     */
    export type BoardsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BoardsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CardsCountOutputTypeDefaultArgs instead
     */
    export type CardsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CardsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ListsCountOutputTypeDefaultArgs instead
     */
    export type ListsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ListsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BoardListsDefaultArgs instead
     */
    export type BoardListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BoardListsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BoardMembersDefaultArgs instead
     */
    export type BoardMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BoardMembersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BoardsDefaultArgs instead
     */
    export type BoardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BoardsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CardsDefaultArgs instead
     */
    export type CardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CardsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CheckListsDefaultArgs instead
     */
    export type CheckListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CheckListsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentsDefaultArgs instead
     */
    export type CommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ListCardsDefaultArgs instead
     */
    export type ListCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ListCardsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ListsDefaultArgs instead
     */
    export type ListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ListsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}